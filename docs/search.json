[{"path":"https://elipousson.github.io/getACS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Eli Pousson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elipousson.github.io/getACS/articles/01_introduction.html","id":"using-get_acs_tables","dir":"Articles","previous_headings":"","what":"Using get_acs_tables()","title":"1. Introduction to getACS","text":"Get race iteration tables tenure status table using county level geography: Filter totals create simple bar chart compare data across tables:","code":"tenure_tables <- acs_table_race_iteration(\"B25003\")[c(2, 3, 10)]  tenure_data <- get_acs_tables(   geography = \"county\",   state = \"MD\",   county = \"Baltimore city\",   table = tenure_tables ) tenure_data |>   filter_acs(indent > 0) |>   select_acs(race_iteration_group) |>   ggplot(aes(x = column_title, y = perc_estimate, fill = race_iteration_group)) +   geom_col(alpha = 0.8, position = \"dodge\") +   scale_y_acs_percent(\"% of households\") +   scale_fill_viridis_d(\"Race/ethnic group\") +   labs_acs_survey(table = tenure_tables, x = \"Tenure\")"},{"path":"https://elipousson.github.io/getACS/articles/01_introduction.html","id":"using-get_acs_geographies","dir":"Articles","previous_headings":"","what":"Using get_acs_geographies()","title":"1. Introduction to getACS","text":"Get county state level geography population table: Drop column title (table contains single variable) use rowname_col parameter group name area. fmt_acs_county() helper function strip text “, Maryland” end name “Baltimore city”. fmt_acs_county() function can work gt_tbl data frame inputs (although support data frames may moved seprate function future). gt_acs_compare() helps transform input data frame place columns different geographies named areas side--side configuration:","code":"multigeo_acs_data <- get_acs_geographies(   geography = c(\"county\", \"state\"),   state = \"MD\",   county = \"Baltimore city\",   table = \"B01003\",   quiet = TRUE ) multigeo_acs_data |>   select_acs(.column_title_col = NULL) |>   gt_acs(     rowname_col = \"NAME\",     value_label = \"Population\",     table = \"B01003\"   ) |>   fmt_acs_county(state = \"Maryland\") multigeo_acs_data |>   select_acs() |>   fmt_acs_county(state = \"Maryland\") |>   gt_acs_compare(     value_label = \"\",     column_title_label = \"\",     table = \"B01003\"   )"},{"path":"https://elipousson.github.io/getACS/articles/01_introduction.html","id":"using-get_acs_ts","dir":"Articles","previous_headings":"","what":"Using get_acs_ts()","title":"1. Introduction to getACS","text":"get_acs_ts() relies helper, acs_survey_ts(), identifies non-overlapping, comparable sample years specific ACS sample: get_acs_ts() calls acs_survey_ts() internally return data multiple years (warning variable unavailable specific year geography): Helper functions ggplot2 include scale_x_acs_ts() set appropriate breaks:","code":"years <- acs_survey_ts(\"acs5\", 2021)  years #> [1] 2021 2016 2011 acs_ts_data <- get_acs_ts(   geography = \"county\",   state = \"MD\",   survey = \"acs5\",   year = 2021,   table = \"B01003\",   quiet = TRUE )  glimpse(acs_ts_data) #> Rows: 72 #> Columns: 25 #> $ GEOID                    <chr> \"24001\", \"24003\", \"24005\", \"24009\", \"24011\", … #> $ NAME                     <chr> \"Allegany County, Maryland\", \"Anne Arundel Co… #> $ variable                 <chr> \"B01003_001\", \"B01003_001\", \"B01003_001\", \"B0… #> $ column_id                <chr> \"B01003001\", \"B01003001\", \"B01003001\", \"B0100… #> $ table_id                 <chr> \"B01003\", \"B01003\", \"B01003\", \"B01003\", \"B010… #> $ estimate                 <dbl> 68684, 584064, 850702, 92515, 33234, 172148, … #> $ moe                      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ perc_estimate            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ perc_moe                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ table_title              <chr> \"Total Population\", \"Total Population\", \"Tota… #> $ simple_table_title       <chr> \"Total Population\", \"Total Population\", \"Tota… #> $ subject_area             <chr> \"Age-Sex\", \"Age-Sex\", \"Age-Sex\", \"Age-Sex\", \"… #> $ universe                 <chr> \"Total Population\", \"Total Population\", \"Tota… #> $ denominator_column_id    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ topics                   <chr> \"{\\\"age\\\",\\\"sex\\\"}\", \"{\\\"age\\\",\\\"sex\\\"}\", \"{\\… #> $ line_number              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ column_title             <chr> \"Total\", \"Total\", \"Total\", \"Total\", \"Total\", … #> $ indent                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ parent_column_id         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ denominator_estimate     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ denominator_moe          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ denominator_column_title <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ geography                <chr> \"county\", \"county\", \"county\", \"county\", \"coun… #> $ state                    <chr> \"MD\", \"MD\", \"MD\", \"MD\", \"MD\", \"MD\", \"MD\", \"MD… #> $ year                     <dbl> 2021, 2021, 2021, 2021, 2021, 2021, 2021, 202… acs_ts_data |>   filter_acs(     GEOID %in% c(\"24510\", \"24005\", \"24003\", \"24027\", \"24025\", \"24035\")   ) |>   fmt_acs_county(state = \"Maryland\") |>   ggplot(aes(x = year, y = estimate, color = NAME)) +   geom_point(size = 2) +   geom_line(linewidth = 1) +   scale_y_acs_estimate(\"Population\", limits = c(0, 1000000)) +   scale_x_acs_ts(survey = \"acs5\", year = 2021) +   scale_color_brewer(type = \"qual\", palette = 3) +   theme(legend.position = \"bottom\")"},{"path":"https://elipousson.github.io/getACS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/getACS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2023). getACS: Help Wrangling American Community Survey Data tidycensus. R package version 0.1.1.9002, https://elipousson.github.io/getACS/.","code":"@Manual{,   title = {getACS: Help Wrangling American Community Survey Data from tidycensus},   author = {Eli Pousson},   year = {2023},   note = {R package version 0.1.1.9002},   url = {https://elipousson.github.io/getACS/}, }"},{"path":"https://elipousson.github.io/getACS/index.html","id":"getacs","dir":"","previous_headings":"","what":"Help Wrangling American Community Survey Data from tidycensus","title":"Help Wrangling American Community Survey Data from tidycensus","text":"goal getACS make easier work American Community Survey data tidycensus package Kyle Walker others. package includes: Functions extend tidycensus::get_acs() support multiple tables, geographies, years Functions creating formatted tables ACS data using gt package Note don’t love current name package expect rename soon think better one.","code":""},{"path":"https://elipousson.github.io/getACS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Help Wrangling American Community Survey Data from tidycensus","text":"can install development version getACS GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"elipousson/getACS\")"},{"path":"https://elipousson.github.io/getACS/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Help Wrangling American Community Survey Data from tidycensus","text":"main feature getACS support returning multiple tables, geographies, years. package also includes utility functions filtering data selecting columns support creation tables using gt package: gt_acs_compare() function also allows side--side comparison geographies: gt_acs_compare_vars() variant gt_acs_compare() default values support comparisons values columns geographical areas rows: package also includes several simple functions support creating plots ggplot2 package:  information working Census data R read book Analyzing US Census Data: Methods, Maps, Models R (February 2023).","code":"library(getACS) library(gt) library(ggplot2) acs_data <- get_acs_geographies(   geography = c(\"county\", \"state\"),   county = \"Baltimore city\",   state = \"MD\",   table = \"B08134\",   quiet = TRUE ) tbl_data <- filter_acs(acs_data, indent == 1, line_number <= 10) tbl_data <- select_acs(tbl_data)  commute_tbl <- gt_acs(   tbl_data,   groupname_col = \"NAME\",   column_title_label = \"Commute time\",   table = \"B08134\" )  as_raw_html(commute_tbl) commute_tbl_compare <- gt_acs_compare(   data = tbl_data,   id_cols = \"column_title\",   column_title_label = \"Commute time\",   table = \"B08134\" )  as_raw_html(commute_tbl_compare) commute_tbl_compare_vars <- acs_data |>    filter_acs(indent == 1, line_number > 10) |>    gt_acs_compare_vars(     table = acs_data$table_id   )  as_raw_html(commute_tbl_compare_vars) plot_data <- acs_data |>   filter_acs(indent == 1, line_number > 10) |>    select_acs() |>    fmt_acs_county(state = \"Maryland\")  plot_data |>   ggplot(aes(x = perc_estimate, y = column_title, fill = NAME)) +   geom_col(position = \"dodge\", alpha = 0.75) +   geom_acs_errorbarh(perc = TRUE, linewidth = 0.25, position = \"dodge\") +   scale_x_acs_percent() +   scale_fill_viridis_d() +   theme_minimal() +   theme(legend.position = \"top\") +   labs_acs_survey(     y = \"Means of transportation to work\",     fill = \"Geography\",     table = acs_data$table_id   )"},{"path":[]},{"path":"https://elipousson.github.io/getACS/index.html","id":"related-r-packages-and-analysis-projects","dir":"","previous_headings":"Related projects","what":"Related R packages and analysis projects","title":"Help Wrangling American Community Survey Data from tidycensus","text":"{easycensus}: Quickly Extract Marginalize U.S. Census Tables {cwi}: Functions speed standardize Census ACS data analysis multiple staff people DataHaven, preview trends patterns, get data layperson-friendly {camiller}: set convenience functions, functions working ACS data via tidycensus {psrccensus}: set tools developed PSRC (Puget Sound Regional Council) staff pull, process, visualize Census Data geographies Central Puget Sound Region. {CTPPr}: R package loading working US Census CTPP survey data. {lehdr}: package grab LEHD data support city regional planning economic transportation analysis {mapreliability}: R package map classification reliability calculator Studying Neighborhoods Uncertain Census Data: Code create visualize demographic clusters US data American Community Survey","code":""},{"path":"https://elipousson.github.io/getACS/index.html","id":"related-python-libraries","dir":"","previous_headings":"Related projects","what":"Related Python libraries","title":"Help Wrangling American Community Survey Data from tidycensus","text":"census-data-aggregator: Python library L.. Times data desk help “combine U.S. census data responsibly” census-table-metadata: Tools generating metadata tables fields Census release based sequence lookup table shell files. (Note: pre-computed data repository used label ACS data label_acs_metadata())","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_perc_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Create perc value and moe column names with prefix and separator — acs_perc_cols","title":"Create perc value and moe column names with prefix and separator — acs_perc_cols","text":"Create perc value moe column names prefix separator","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_perc_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create perc value and moe column names with prefix and separator — acs_perc_cols","text":"","code":"acs_perc_cols(   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\" )"},{"path":"https://elipousson.github.io/getACS/reference/acs_perc_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create perc value and moe column names with prefix and separator — acs_perc_cols","text":"perc_prefix Prefix string percent value columns. perc_sep Separator string perc_prefix value_col moe_col strings.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Assorted helpers for ACS survey types and labels — acs_survey","title":"Assorted helpers for ACS survey types and labels — acs_survey","text":"simple functions allow validating ACS survey options, getting comparable years time series analysis, creating standard labels.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assorted helpers for ACS survey types and labels — acs_survey","text":"","code":"acs_survey_match(survey = \"acs5\", error_call = caller_env())  acs_survey_sample(survey = \"acs5\")  acs_survey_ts(survey = \"acs5\", year = 2021, call = caller_env())  acs_survey_label(   survey = \"acs5\",   year = 2021,   pattern = \"{year_start}-{year} ACS {sample}-year Estimates\",   prefix = \"\" )  acs_survey_label_table(   survey = \"acs5\",   year = 2021,   prefix = \"\",   table = NULL,   table_label = \"Table\",   sep = \", \",   and = \" and \",   before = \"\",   after = before,   end = \".\",   oxford_comma = TRUE )"},{"path":"https://elipousson.github.io/getACS/reference/acs_survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assorted helpers for ACS survey types and labels — acs_survey","text":"survey ACS survey, \"acs5\", \"acs3\", \"acs1\". error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. pattern Pattern passed glue::glue(). Allows use year_start variable earliest year survey sample specified survey parameter. prefix Text insert ACS survey label. table One table IDs include label source note. table_label Label use referring table tables. \"s\" appended end table_label tables length 1. sep Separator inserted words. Character string prepended last word. , character string added /word. end character string appended end full label. Defaults \".\". oxford_comma Whether insert separator last two elements list.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_survey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assorted helpers for ACS survey types and labels — acs_survey","text":"","code":"acs_survey_match(\"acs1\") #> [1] \"acs1\"  acs_survey_sample(\"acs3\") #> [1] \"3\"  acs_survey_ts(\"acs5\", 2020) #> ℹ Learn more about comparing 2020 American Community Survey Data: #>   <https://www.census.gov/programs-surveys/acs/guidance/comparing-acs-data/2020.html> #> [1] 2020 2015 2010  acs_survey_label() #> 2017-2021 ACS 5-year Estimates  acs_survey_label_table(table = c(\"B19013\", \"B01003\")) #> 2017-2021 ACS 5-year Estimates, Tables B19013 and B01003."},{"path":"https://elipousson.github.io/getACS/reference/acs_table_race_iteration.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a set of race iteration codes to an ACS table ID — acs_table_race_iteration","title":"Append a set of race iteration codes to an ACS table ID — acs_table_race_iteration","text":"acs_table_race_iteration() uses race_iteration reference data create validate race iteration codes create race iteration table IDs.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_table_race_iteration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a set of race iteration codes to an ACS table ID — acs_table_race_iteration","text":"","code":"acs_table_race_iteration(table, codes = NULL, error_call = caller_env())"},{"path":"https://elipousson.github.io/getACS/reference/acs_table_race_iteration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a set of race iteration codes to an ACS table ID — acs_table_race_iteration","text":"table ACS table ID string. codes Character vector race iteration codes return. NULL (default), codes set c(\"\", race_iteration[[\"code\"]]). error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_table_race_iteration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a set of race iteration codes to an ACS table ID — acs_table_race_iteration","text":"character vector variable ID values single table.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/acs_table_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an ACS table ID to a set of variable ID values — acs_table_variables","title":"Convert an ACS table ID to a set of variable ID values — acs_table_variables","text":"acs_table_variables() helps make vector variable ID values based table ID string. returned variable IDs use format returned tidycensus::get_acs(), e.g. \"table_id_line_number\" line_number width 3 string prefixed \"0\". variables NULL, function calls get_acs_metadata() metadata = \"column\" returns available variables table supplied year survey. Note sep width parameters changed working data {tidycensus} package.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_table_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an ACS table ID to a set of variable ID values — acs_table_variables","text":"","code":"acs_table_variables(   table = NULL,   variables = NULL,   data = NULL,   survey = \"acs5\",   year = 2021,   sep = \"_\",   width = 3,   error_call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/acs_table_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an ACS table ID to a set of variable ID values — acs_table_variables","text":"table ACS table ID string. variables numeric vector corresponding line number variables. data data provided table NULL, table set based unique values \"table_id\" column data. data contains one table_id value, function error survey Survey, \"acs5\", \"acs3\", \"acs1\". year Sample year (2006 2021). sep separator character table ID string variable ID values. width Variable ID suffix width. error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_table_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an ACS table ID to a set of variable ID values — acs_table_variables","text":"character vector variable ID values single table.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/cli_quiet.html","id":null,"dir":"Reference","previous_headings":"","what":"From cliExtras::cli_quiet — cli_quiet","title":"From cliExtras::cli_quiet — cli_quiet","text":"cliExtras::cli_quiet","code":""},{"path":"https://elipousson.github.io/getACS/reference/cli_quiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From cliExtras::cli_quiet — cli_quiet","text":"","code":"cli_quiet(quiet = FALSE, push = FALSE, .frame = rlang::caller_env())"},{"path":"https://elipousson.github.io/getACS/reference/cli_quiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From cliExtras::cli_quiet — cli_quiet","text":"quiet FALSE (default), leave cli.default_handler option unchanged. TRUE, set cli.default_handler suppressMessages temporarily rlang::local_options()","code":""},{"path":"https://elipousson.github.io/getACS/reference/collapse_acs_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse variables into a new label column using forcats::fct_collapse() — collapse_acs_variables","title":"Collapse variables into a new label column using forcats::fct_collapse() — collapse_acs_variables","text":"collapse_acs_variables() uses forcats::fct_collapse() aggregated variables creating new label column. variables retained list columns unique values. aggregated values perc_moe may accurate transformation function.","code":""},{"path":"https://elipousson.github.io/getACS/reference/collapse_acs_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse variables into a new label column using forcats::fct_collapse() — collapse_acs_variables","text":"","code":"collapse_acs_variables(   data,   ...,   other_level = NULL,   name_col = \"NAME\",   variable_col = \"variable\",   label_col = \"label\",   value_col = \"estimate\",   moe_col = \"moe\",   na.rm = TRUE,   digits = 2 )"},{"path":"https://elipousson.github.io/getACS/reference/collapse_acs_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse variables into a new label column using forcats::fct_collapse() — collapse_acs_variables","text":"data ACS data frame input. ... <dynamic-dots> series named character vectors. levels vector replaced name. other_level Value level used \"\" values. Always placed end levels. name_col Name column name, Default: 'NAME' variable_col Variable column name, Default: 'variable' label_col Label column name, Default: 'label'. Label factor column added returned data frame. value_col, moe_col Value margin error column names (default \"estimate\" \"moe\"). na.rm Passed sum(), Default: TRUE digits Passed round(), Default: 2","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/collapse_acs_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse variables into a new label column using forcats::fct_collapse() — collapse_acs_variables","text":"","code":"if (FALSE) { if (interactive()) {   edu_data <- get_acs_tables(     \"county\",     table = \"B15003\",     state = \"MD\",     county = \"Baltimore city\"   )    table_vars <- acs_table_variables(\"B15003\")    collapse_acs_variables(edu_data,     \"total\" = table_vars[1],     \"second\" = table_vars[2],     \"third and fourth\" = table_vars[3:4],     \"next 5\" = table_vars[5:10],     other_level = \"Other\"   ) } }"},{"path":"https://elipousson.github.io/getACS/reference/cols_acs_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Variant of gt::cols_label() for ACS — cols_acs_label","title":"Variant of gt::cols_label() for ACS — cols_acs_label","text":"Variant gt::cols_label() ACS","code":""},{"path":"https://elipousson.github.io/getACS/reference/cols_acs_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variant of gt::cols_label() for ACS — cols_acs_label","text":"","code":"cols_acs_label(   data,   value_col = \"estimate\",   value_label = \"Est.\",   moe_col = \"moe\",   moe_label = \"MOE\",   perc_prefix = \"perc\",   perc_sep = \"_\",   perc_value_label = \"% share\",   perc_moe_label = \"% MOE\",   name_col = \"NAME\",   name_label = NULL,   column_title_col = \"column_title\",   column_title_label = NULL,   env = NULL,   .col_fn = starts_with )"},{"path":"https://elipousson.github.io/getACS/reference/cols_acs_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variant of gt::cols_label() for ACS — cols_acs_label","text":"value_col Value column name. Defaults \"estimate\" value_label Value column label. Defaults \"Est.\". moe_col Margin error column name. Defaults \"moe\" moe_label Margin error column label. Defaults \"MOE\". perc_prefix Prefix string percent value columns. perc_sep Separator string perc_prefix value_col moe_col strings. perc_value_label Percent value column label. perc_moe_label Percent margin error column label. column_title_col, column_title_label Column title column name label. Defaults  \"column_title\" NULL. env [environment()] Environment attach. .col_fn tidyselect function use column names. Defaults tidyselect::starts_with, variable_col Variable column name. Defaults \"variable\". Typically, dropped table default.","code":""},{"path":"https://elipousson.github.io/getACS/reference/cols_merge_uncert_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","text":"cols_merge_uncert_ext() variant gt::cols_merge_uncert() support col_val col_uncert set based length 2 cols parameter optionally apply prefix postfix value. options primarily internal use gt_acs(), fmt_acs_estimate(), fmt_acs_percent().","code":""},{"path":"https://elipousson.github.io/getACS/reference/cols_merge_uncert_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","text":"","code":"cols_merge_uncert_ext(   gt_object,   columns = NULL,   col_val = NULL,   col_uncert = NULL,   prefix = \"\",   postfix = \"\",   sep = \"\",   ...,   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/cols_merge_uncert_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","text":"gt_object gt object. columns description col_val Column target base values <column-targeting expression> // required column contains values start range. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided . col_uncert Column columns target uncertainty values <column-targeting expression> // required common case involves supplying single column uncertainties; values combined col_val. Less commonly, lower upper uncertainty bounds may different. case, two columns representing lower upper uncertainty values away col_val, respectively, provided. select helper functions starts_with() ends_with() can used column targeting, recommended one two column names explicitly provided vector. prefix, postfix Optional strings insert /col_val col_uncert. Use length 2 string c(\"\", \"uncert_prefix\") want apply prefix one column specification. sep Separator text uncertainties scalar<character> // default: \" +/- \" separator text contains uncertainty mark single uncertainty value. default value \" +/- \" indicates appropriate plus/minus mark used depending output context. want special symbol taken literally, can supplied within () function. ... One character vectors. NULLs removed; scalar inputs (vectors length 1) recycled common length vector inputs. Like R functions, missing values \"infectious\": whenever missing value combined another string result always missing. Use dplyr::coalesce() str_replace_na() convert desired value. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/dot-gt_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table with gt::gt() — .gt_ext","title":"Create a table with gt::gt() — .gt_ext","text":"Create table gt::gt()","code":""},{"path":"https://elipousson.github.io/getACS/reference/dot-gt_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table with gt::gt() — .gt_ext","text":"","code":".gt_ext(   data,   rownames_to_stub = FALSE,   row_group_as_column = FALSE,   ...,   drop_geometry = TRUE,   hide_na_cols = TRUE )"},{"path":"https://elipousson.github.io/getACS/reference/dot-gt_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table with gt::gt() — .gt_ext","text":"data Input data table obj:<data.frame>|obj:<tbl_df> // required data.frame object tibble (tbl_df). rownames_to_stub Use data frame row labels stub scalar<logical> // default: FALSE option take rownames input data table (available) row labels display table stub. row_group_as_column Mode displaying row group labels stub scalar<logical> // default: FALSE option alters display row group labels. default FALSE row group labels appear dedicated rows respective groups rows. TRUE row group labels occupy secondary column table stub. drop_geometry TRUE (default) data sf object, drop geometry turning data frame table.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fct_recode_with_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for recoding based on a named list — fct_recode_with_list","title":"Helper for recoding based on a named list — fct_recode_with_list","text":"Helper recoding based named list","code":""},{"path":"https://elipousson.github.io/getACS/reference/fct_recode_with_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for recoding based on a named list — fct_recode_with_list","text":"","code":"fct_recode_with_list(x, list = NULL, in_order = TRUE, ordered = NA)"},{"path":"https://elipousson.github.io/getACS/reference/filter_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ACS data by table ID, variables, or other attributes using dplyr::filter() — filter_acs","title":"Filter ACS data by table ID, variables, or other attributes using dplyr::filter() — filter_acs","text":"filter_acs() helps filter data frame American Community Survey data enriched table column metadata using label_acs_metadata() function using dplyr::filter().","code":""},{"path":"https://elipousson.github.io/getACS/reference/filter_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ACS data by table ID, variables, or other attributes using dplyr::filter() — filter_acs","text":"","code":"filter_acs(   data,   ...,   table = NULL,   column = NULL,   vars = NULL,   drop_vars = NULL,   geography = NULL,   variable_col = \"variable\" )"},{"path":"https://elipousson.github.io/getACS/reference/filter_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ACS data by table ID, variables, or other attributes using dplyr::filter() — filter_acs","text":"data data frame \"table_id\", \"variable\", \"column_title\" columns. ... Parameters passed dplyr::filter() table, column Table ID column title values return. vars, drop_vars Variable IDs keep drop. table supplied (data contains data single table), numeric values allowed vars drop_vars (e.g. table \"B14001\" vars 2 data filtered variable \"B14001_002\"). geography Geography values filter . variable_col Variable column name. Defaults \"variable\".","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Format place names or column titles in a gt table or data frame with ACS data — fmt_acs_county","title":"Format place names or column titles in a gt table or data frame with ACS data — fmt_acs_county","text":"fmt_acs_county() helpful stripping state name county-level ACS data fmt_acs_minutes() column duration (e.g. commute times). data gt_tbl object, function can use dplyr::mutate() transform standard data frame.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format place names or column titles in a gt table or data frame with ACS data — fmt_acs_county","text":"","code":"fmt_acs_county(   data,   state = NULL,   pattern = \", {state}\",   replacement = \"\",   name_col = \"NAME\",   columns = all_of(name_col),   ... )  fmt_acs_minutes(   data,   pattern = \"[:space:]minutes$\",   replacement = \"\",   column_title_col = \"column_title\",   columns = all_of(column_title_col),   ... )"},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format place names or column titles in a gt table or data frame with ACS data — fmt_acs_county","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. state State name. Required state included pattern. pattern Passed glue::glue() stringr::str_replace() fmt_acs_county() just stringr::str_replace() fmt_acs_minutes(). Defaults \", {state}\" strips state name column county-level name values \"[:space:]minutes$\" strips trailing text minutes. replacement Passed stringr::str_replace(). Defaults \"\". name_col Name column place name values. Defaults \"NAME\" columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function. Examples select helper functions include starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). ... Arguments passed gt::fmt rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function. Examples select helper functions include starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). compat Formatting compatibility vector<character> // default: NULL (optional) optional vector provides compatible classes formatting. default NULL. fns Formatting functions function|list functions // required Either single formatting function named list functions. column_title_col Column title column.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Format estimate and margin of error columns in a gt table — fmt_acs_estimate","title":"Format estimate and margin of error columns in a gt table — fmt_acs_estimate","text":"fmt_acs_estimate() formats estimate margin error columns gt table created ACS data. fmt_acs_percent() perc_estimate perc_moe columns calculated join_acs_percent().  functions used internally gt_acs().","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format estimate and margin of error columns in a gt table — fmt_acs_estimate","text":"","code":"fmt_acs_estimate(   gt_object,   col_est = \"estimate\",   col_moe = \"moe\",   columns = NULL,   col_labels = \"Est.\",   spanner = NULL,   decimals = 0,   use_seps = TRUE,   ...,   call = caller_env() )  fmt_acs_percent(   gt_object,   col_est = \"perc_estimate\",   col_moe = \"perc_moe\",   columns = NULL,   col_labels = \"% share\",   spanner = NULL,   decimals = 0,   use_seps = TRUE,   ...,   call = caller_env() )  cols_label_ext(   gt_object,   columns = NULL,   col_labels = NULL,   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format estimate and margin of error columns in a gt table — fmt_acs_estimate","text":"gt_object gt object. col_est, col_moe Column names estimate margin error values table data. columns NULL (default), columns set c(col_est, col_moe). spanner NULL, columns passed cols_merge_uncert_ext() must length 2 character vector. col_labels Column name used one columns passed cols_label_ext() spanner NULL, gt table passed cols_merge_uncert_ext(). NULL, spanner passed label parameter gt::tab_spanner(). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. always need decimals = 0, fmt_integer() function considered. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. ... Additional parameters passed gt::fmt_number() fmt_acs_estimate() gt::fmt_percent() fmt_acs_percent(). call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format estimate and margin of error columns in a gt table — fmt_acs_estimate","text":"Using cols_label_ext cols_label_ext() variant gt::cols_label() used fmt_acs_estimate() fmt_acs_percent().","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_jam_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Format jam values in an estimate column of a gt table or ACS data frame — fmt_acs_jam_values","title":"Format jam values in an estimate column of a gt table or ACS data frame — fmt_acs_jam_values","text":"Currently supports variable B25035_001 Median Year Structure Built table.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_jam_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format jam values in an estimate column of a gt table or ACS data frame — fmt_acs_jam_values","text":"","code":"fmt_acs_jam_values(data)"},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_jam_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format jam values in an estimate column of a gt table or ACS data frame — fmt_acs_jam_values","text":"data Data frame ACS data","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply formatting to value and percent value columns using gt::fmt_number() and gt::fmt_percent() — fmt_acs_values","title":"Apply formatting to value and percent value columns using gt::fmt_number() and gt::fmt_percent() — fmt_acs_values","text":"fmt_acs_values() wrapper gt::fmt_number(), gt::fmt_percent(), gt::cols_merge_uncert(). value_col starts string supplied perc_prefix, value column formatted percent value.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply formatting to value and percent value columns using gt::fmt_number() and gt::fmt_percent() — fmt_acs_values","text":"","code":"fmt_acs_values(   data,   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   decimals = 0,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   merge_moe = TRUE,   currency_value = FALSE,   ...,   .cols_fn = starts_with )"},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply formatting to value and percent value columns using gt::fmt_number() and gt::fmt_percent() — fmt_acs_values","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. perc_prefix Prefix string percent value columns. perc_sep Separator string perc_prefix value_col moe_col strings. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. always need decimals = 0, fmt_integer() function considered. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. value ignored using suffixing options (.e., suffixing set FALSE). merge_moe TRUE, use gt::cols_merge_uncert() merge value_col moe_col percent value margin error columns. currency_value TRUE, use gt::fmt_currency() format value columns instead gt::fmt_number(). ... Additional parameters passed gt::fmt_currency() currency_value = TRUE .cols_fn tidyselect function used select columns format merge. Defaults tidyselect::starts_with","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/geom_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geom_ functions for plotting ACS data with ggplot2 — geom_acs","text":"","code":"aes_errorbarh(   xmin = NULL,   xmax = NULL,   ...,   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   perc = FALSE )  aes_errorbarv(   ymin = NULL,   ymax = NULL,   ...,   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   perc = FALSE )  geom_acs_errorbarh(   mapping = NULL,   data = NULL,   ...,   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   perc = FALSE )  geom_acs_errorbarv(   mapping = NULL,   data = NULL,   ...,   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   perc = FALSE )"},{"path":"https://elipousson.github.io/getACS/reference/geom_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geom_ functions for plotting ACS data with ggplot2 — geom_acs","text":"... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)).","code":""},{"path":"https://elipousson.github.io/getACS/reference/geom_acs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"geom_ functions for plotting ACS data with ggplot2 — geom_acs","text":"functions wrap existing {ggplot2} functions provide default aesthetic mappings work structure input ACS data support shorter, less repetitive plotting code.","code":""},{"path":"https://elipousson.github.io/getACS/reference/getACS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"getACS: Help Wrangling American Community Survey Data from tidycensus — getACS-package","title":"getACS: Help Wrangling American Community Survey Data from tidycensus — getACS-package","text":"package helper functions working Census data downloaded tidycensus package.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/getACS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"getACS: Help Wrangling American Community Survey Data from tidycensus — getACS-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get table or column metadata from Census Reporter project — get_acs_metadata","title":"Get table or column metadata from Census Reporter project — get_acs_metadata","text":"Read precomputed U.S. Census table column metadata files  Census Reporter GitHub repository.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get table or column metadata from Census Reporter project — get_acs_metadata","text":"","code":"get_acs_metadata(   survey = \"acs5\",   year = 2021,   metadata = \"table\",   ...,   table = NULL,   cache_data = TRUE,   progress = FALSE,   show_col_types = FALSE,   quiet = FALSE,   error_call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get table or column metadata from Census Reporter project — get_acs_metadata","text":"survey Survey, \"acs5\", \"acs3\", \"acs1\". year Sample year (2006 2021). metadata Type metadata return, \"table\" \"column\" ... Arguments passed readr::read_csv file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. quote Single character used quote strings. col_names Either TRUE, FALSE character vector column names. TRUE, first row input used column names, included data frame. FALSE, column names generated automatically: X1, X2, X3 etc. col_names character vector, values used names columns, first row input read first row output data frame. Missing (NA) column names generate warning, filled dummy names ...1, ...2 etc. Duplicate column names generate warning made unique, see name_repair control done. col_types One NULL, cols() specification, string. See vignette(\"readr\") details. NULL, column types inferred guess_max rows input, interspersed throughout file. convenient (fast), robust. guessed types wrong, need increase guess_max supply correct types . Column specifications created list() cols() must contain one column specification column. want read subset columns, use cols_only(). Alternatively, can use compact string representation character represents one column: c = character = integer n = number d = double l = logical f = factor D = date T = date time t = time ? = guess _ - = skip default, reading file without column specification print message showing readr guessed . remove message, set show_col_types = FALSE set `options(readr.show_col_types = FALSE). col_select Columns include results. can use mini-language dplyr::select() refer columns name. Use c() use one selection expression. Although usage less common, col_select also accepts numeric column index. See ?tidyselect::language full details selection language. id name column store file path. useful reading multiple input files data file paths, data collection date. NULL (default) extra column created. locale locale controls defaults vary place place. default locale US-centric (like R), can use locale() create locale controls things like default time zone, encoding, decimal mark, big mark, day/month names. na Character vector strings interpret missing values. Set option character() indicate missing values. quoted_na missing values inside quotes treated missing values (default) strings. parameter soft deprecated readr 2.0.0. comment string used identify comments. text comment characters silently ignored. trim_ws leading trailing whitespace (ASCII spaces tabs) trimmed field parsing ? skip Number lines skip reading data. comment supplied commented lines ignored skipping. n_max Maximum number lines read. guess_max Maximum number lines use guessing column types. never use number lines read. See vignette(\"column-types\", package = \"readr\") details. name_repair Handling column names. default behaviour ensure column names \"unique\". Various repair strategies supported: \"minimal\": name repair checks, beyond basic existence names. \"unique\" (default value): Make sure names unique empty. \"check_unique\": name repair, check unique. \"universal\": Make names unique syntactic. function: apply custom name repair (e.g., name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function(). argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . num_threads number processing threads use initial parsing lazy reading data. data contains newlines within fields parser automatically detect fall back using one thread . However know file newlines within quoted fields safest set num_threads = 1 explicitly. progress Display progress bar? default display interactive session knitting document. automatic progress bar can disabled setting option readr.show_progress FALSE. show_col_types FALSE, show guessed column types. TRUE always show column types, even supplied. NULL (default) show column types explicitly supplied col_types argument. skip_empty_rows blank rows ignored altogether? .e. option TRUE blank rows represented .  FALSE represented NA values columns. lazy Read values lazily? default, FALSE, special considerations reading file lazily tripped users. Specifically, things get tricky reading writing back file. , general, lazy reading (lazy = TRUE) many benefits, especially interactive use downstream work involves subset rows columns. Learn should_read_lazy() documentation altrep argument vroom::vroom().","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get multiple tables or multiple geographies of ACS data — get_acs_tables","title":"Get multiple tables or multiple geographies of ACS data — get_acs_tables","text":"functions wrap tidycensus::get_acs() label_acs_metadata() support downloading multiple tables combining tables single data frame downloading data multiple geographies. Note Census API specific rate request limit using Census API key, using functions large number tables geographies may result errors failed requests. CRAN policies require tidycensus avoid caching default, however, package sets cache_table = TRUE default avoid unecessary load Census API.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get multiple tables or multiple geographies of ACS data — get_acs_tables","text":"","code":"get_acs_tables(   geography,   table = NULL,   cache_table = TRUE,   year = 2021,   survey = \"acs5\",   ...,   crs = NULL,   label = TRUE,   perc = TRUE,   keep_geography = TRUE,   geoid_col = \"GEOID\",   quiet = FALSE,   call = caller_env() )  get_acs_geographies(   geography = c(\"county\", \"state\"),   variables = NULL,   table = NULL,   cache_table = TRUE,   year = 2021,   state = NULL,   county = NULL,   msa = NULL,   survey = \"acs5\",   ...,   label = TRUE,   perc = TRUE,   geoid_col = \"GEOID\",   quiet = FALSE )  get_acs_geography(   geography,   variables = NULL,   table = NULL,   cache_table = TRUE,   year = 2021,   state = NULL,   county = NULL,   msa = NULL,   survey = \"acs5\",   ...,   label = TRUE,   perc = TRUE,   geoid_col = \"GEOID\",   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get multiple tables or multiple geographies of ACS data — get_acs_tables","text":"geography Required character vector one geographies. See https://walker-data.com/tidycensus/articles/basic-usage.html#geography--tidycensus supported options. Defaults c(\"county\", \"state\") get_acs_geographies(). supplied geography support county state parameters, options dropped calling tidycensus::get_acs(). required parameters also bound returned data frame new columns. table character vector tables. cache_table Whether cache table names faster future access. Defaults FALSE; TRUE, needs called per dataset.  variables dataset already cached via load_variables function, can bypassed. year year, endyear, ACS sample. 5-year ACS data available 2009 2021; 1-year ACS data available 2005 2021, exception 2020.  Defaults 2021. survey ACS contains one-year, three-year, five-year surveys expressed \"acs1\", \"acs3\", \"acs5\". default selection \"acs5.\" ... Arguments passed tidycensus::get_acs output One \"tidy\" (default) row represents enumeration unit-variable combination, \"wide\" row represents enumeration unit variables columns. zcta zip code tabulation area(s) requesting data. Specify single value vector values get data one ZCTA. Numeric character ZCTA GEOIDs accepted. specifying ZCTAs, geography must set `\"zcta\"` `state` must specified `county` left `NULL`. Defaults NULL. geometry FALSE (default), return regular tibble ACS data. TRUE, uses tigris package return sf tibble simple feature geometry `geometry` column. keep_geo_vars TRUE, keeps variables Census shapefile obtained tigris.  Defaults FALSE. shift_geo (deprecated) TRUE, returns geometry Alaska Hawaii shifted thematic mapping entire US. Geometry originally obtained albersusa R package. May 2021, recommend using tigris::shift_geometry() instead. summary_var Character string \"summary variable\" ACS included output. Usually variable (e.g. total population) want use denominator comparison. key Census API key. Obtain one https://api.census.gov/data/key_signup.html moe_level confidence level returned margin error.  One 90 (default), 95, 99. show_call TRUE, display call made Census API. can useful debugging determining error messages returned due tidycensus Census API. Copy API call browser see returned API directly. Defaults FALSE. crs Coordinate reference system use returned sf tibble geometry = TRUE passed tidycensus::get_acs(). Defaults NULL. label TRUE (default), label returned ACS data label_acs_metadata() returning data frame. perc TRUE (default), use denominator column ID calculate estimate percent share denominator value use tidycensus::moe_prop() calculate new margin error percent estimate. keep_geography TRUE (default), bind geography supplied county state columns returned data frame. geoid_col GeoID column name use perc TRUE, Defaults 'GEOID'. quiet FALSE (default), leave cli.default_handler option unchanged. TRUE, set cli.default_handler suppressMessages temporarily rlang::local_options() call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. variables Character string vector character strings variable IDs. tidycensus automatically returns estimate margin error associated variable. state optional vector states requesting data. State names, postal codes, FIPS codes accepted. Defaults NULL. county county requesting data. County names FIPS codes accepted. Must combined value supplied `state`. Defaults NULL. msa Name GeoID metro area filtered overall list metro areas returned geography geographies  \"metropolitan/micropolitan statistical area\", \"cbsa\", \"metropolitan statistical area/micropolitan statistical area\".","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get multiple tables or multiple geographies of ACS data — get_acs_tables","text":"","code":"if (FALSE) { if (interactive()) {   get_acs_tables(     geography = \"county\",     county = \"Baltimore city\",     state = \"MD\",     table = c(\"B01003\", \"B19013\")   )    get_acs_geographies(     geography = c(\"county\", \"state\"),     state = \"MD\",     table = c(\"B01003\", \"B19013\")   ) } }"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get multiple years of ACS data for time series analysis — get_acs_ts","title":"Get multiple years of ACS data for time series analysis — get_acs_ts","text":"get_acs_ts() variant get_acs_geographies() supports downloading data multiple years addition multiple tables multiple geographies. year appended additional column returned data frame. intended use provide latest year needed function download data non-overlapping survey periods. example, 2021 ACS data using 5-year sample can compared 5-year data 2016 2011. variables can compared across different years caution recommended using ACS data time series analysis.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get multiple years of ACS data for time series analysis — get_acs_ts","text":"","code":"get_acs_ts(   geography,   variables = NULL,   table = NULL,   cache_table = TRUE,   year = 2021,   state = NULL,   county = NULL,   survey = \"acs5\",   ...,   quiet = FALSE )"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get multiple years of ACS data for time series analysis — get_acs_ts","text":"geography Required character vector one geographies. See https://walker-data.com/tidycensus/articles/basic-usage.html#geography--tidycensus supported options. Defaults c(\"county\", \"state\") get_acs_geographies(). supplied geography support county state parameters, options dropped calling tidycensus::get_acs(). required parameters also bound returned data frame new columns. variables Character string vector character strings variable IDs. tidycensus automatically returns estimate margin error associated variable. table character vector tables. cache_table Whether cache table names faster future access. Defaults FALSE; TRUE, needs called per dataset.  variables dataset already cached via load_variables function, can bypassed. year numeric vector years. length 1, function uses acs_survey_ts() get data comparable survey years back start ACS. recommended approach using get_acs_ts(). length greater 1, return selected years even years may valid compare. state optional vector states requesting data. State names, postal codes, FIPS codes accepted. Defaults NULL. county county requesting data. County names FIPS codes accepted. Must combined value supplied `state`. Defaults NULL. survey ACS contains one-year, three-year, five-year surveys expressed \"acs1\", \"acs3\", \"acs5\". default selection \"acs5.\" ... keyword arguments quiet FALSE (default), leave cli.default_handler option unchanged. TRUE, set cli.default_handler suppressMessages temporarily rlang::local_options()","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get multiple years of ACS data for time series analysis — get_acs_ts","text":"data frame sf object.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_decennial_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get multiple years of decennial US Census data for time series analysis — get_decennial_ts","title":"Get multiple years of decennial US Census data for time series analysis — get_decennial_ts","text":"get_decennial_ts() wrapper tidycensus::get_decennial() handle time series data.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_decennial_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get multiple years of decennial US Census data for time series analysis — get_decennial_ts","text":"","code":"get_decennial_ts(   geography,   variables = NULL,   table = NULL,   cache_table = TRUE,   year = 2020,   sumfile = NULL,   state = NULL,   county = NULL,   geometry = FALSE,   summary_var = NULL,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/get_decennial_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get multiple years of decennial US Census data for time series analysis — get_decennial_ts","text":"geography geography data. variables year value 2020, variables must length year value corresponding one years requested. temporary requirement address mismatch available data 2000 2010 relative 2020. Default: NULL table Census table like request variables. Uses lookup tables identify variables; performs faster variable table already exists load_variables(cache = TRUE). one table may requested per call. cache_table Whether cache table names faster future access. Defaults FALSE; TRUE, needs called per dataset.  variables dataset already cached via load_variables function, can bypassed. year year length 1, treated max year decennial Census years back 2000, added vector requested years. Default: 2020 sumfile Census summary file; NULL, defaults \"pl\" year 2020 \"sf1\" 2000 2010.  summary files available decennial Census year.  Make sure using correct summary file requested variables, variable IDs may repeated across summary files represent different topics. state state requesting data. State names, postal codes, FIPS codes accepted. Defaults NULL. county county requesting data. County names FIPS codes accepted. Must combined value supplied `state`.  Defaults NULL. geometry FALSE (default), return regular tibble ACS data. TRUE, uses tigris package return sf tibble simple feature geometry `geometry` column. summary_var Character string \"summary variable\" decennial Census included output. Usually variable (e.g. total population) want use denominator comparison. ... Arguments passed tidycensus::get_decennial output One \"tidy\" (default) row represents enumeration unit-variable combination, \"wide\" row represents enumeration unit variables columns. keep_geo_vars TRUE, keeps variables Census shapefile obtained tigris.  Defaults FALSE. shift_geo (deprecated) TRUE, returns geometry Alaska Hawaii shifted thematic mapping entire US. Geometry originally obtained albersusa R package.  May 2021, recommend using tigris::shift_geometry() instead. pop_group population group code like request data.  Applies summary files population group breakdowns available like Detailed DHC-file. pop_group_label TRUE, return \"pop_group_label\" column contains label population group.  Defaults FALSE. key Census API key. Obtain one https://api.census.gov/data/key_signup.html show_call TRUE, display call made Census API. can useful debugging determining error messages returned due tidycensus Census API. Copy API call browser see returned API directly. Defaults FALSE.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_decennial_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get multiple years of decennial US Census data for time series analysis — get_decennial_ts","text":"data frame decennial Census data.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/get_decennial_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get multiple years of decennial US Census data for time series analysis — get_decennial_ts","text":"","code":"if (FALSE) { if (interactive()) {   md_counties <- get_decennial_ts(     geography = \"county\",     variables = c(\"P001001\", \"P001001\", \"P1_001N\"),     year = 2020,     county = \"Baltimore city\",     state = \"MD\",     geometry = FALSE   ) } }"},{"path":"https://elipousson.github.io/getACS/reference/get_geography_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get geography parameters — get_geography_params","title":"Get geography parameters — get_geography_params","text":"Get named list parameters including geography , optionally, state county, dropped checked depending whether value required download data specified geography using Census API.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_geography_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get geography parameters — get_geography_params","text":"","code":"get_geography_params(   geography,   year = 2021,   state = NULL,   county = NULL,   allow_decennial = FALSE,   ...,   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/get_geography_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get geography parameters — get_geography_params","text":"geography geography data. year Survey year. state, county State county. Defaults NULL. allow_decennial TRUE, allow geography values \"block\" \"voting district\" supported tidycensus::get_decennial(). FALSE (default), error geographies supported tidycensus::get_acs(). call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table with formatted ACS estimate and percent estimate columns — gt_acs","title":"Create a gt table with formatted ACS estimate and percent estimate columns — gt_acs","text":"Create format gt table estimate margin error (optionally) percent estimate margin error value. Use combination select_acs() helper function prep data creating table.","code":""},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table with formatted ACS estimate and percent estimate columns — gt_acs","text":"","code":"gt_acs(   data,   rownames_to_stub = FALSE,   row_group_as_column = FALSE,   ...,   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   column_title_col = \"column_title\",   name_col = \"NAME\",   perc_value_label = \"% share\",   value_label = \"Est.\",   column_title_label = NULL,   name_label = NULL,   est_spanner = NULL,   perc_spanner = NULL,   combined_spanner = NULL,   decimals = 0,   source_note = NULL,   append_note = FALSE,   drop_geometry = TRUE,   hide_na_cols = TRUE,   currency_value = FALSE,   survey = \"acs5\",   year = 2021,   table = NULL,   prefix = \"Source: \",   end = \".\",   est_cols = NULL,   perc_cols = NULL )"},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table with formatted ACS estimate and percent estimate columns — gt_acs","text":"data Input data table obj:<data.frame>|obj:<tbl_df> // required data.frame object tibble (tbl_df). rownames_to_stub Use data frame row labels stub scalar<logical> // default: FALSE option take rownames input data table (available) row labels display table stub. row_group_as_column Mode displaying row group labels stub scalar<logical> // default: FALSE option alters display row group labels. default FALSE row group labels appear dedicated rows respective groups rows. TRUE row group labels occupy secondary column table stub. ... Additional parameters passed gt::fmt_number() fmt_acs_estimate() gt::fmt_percent() fmt_acs_percent(). value_col Value column name. Defaults \"estimate\" moe_col Margin error column name. Defaults \"moe\" perc_prefix Prefix string percent value columns. perc_sep Separator string perc_prefix value_col moe_col strings. column_title_col, column_title_label Column title label. column_title_label string, column_title_col required. column_title_label can also named vector format c(\"label\" = \"column\"). column_title_col defaults \"column_title\". column_title_label \"from_table\", label set based simple_table_title column table metadata. name_col, name_label Place name column label. name_label can string named vector (similar column_title_label). name_col defaults \"NAME\" perc_value_label Percent value column label. value_label Value column label. Defaults \"Est.\". est_spanner, perc_spanner Spanner labels estimate percent estimate columns. combined_spanner NULL, combined_spanner passed label parameter gt::tab_spanner() using value columns percent columns columns parameter. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. always need decimals = 0, fmt_integer() function considered. source_note Source note text scalar<character> // required Text used source note. can optionally use md() html() functions style text Markdown retain HTML elements text. append_note TRUE, add source_note end generated ACS data label. FALSE, supplied source_note used instead ACS label. drop_geometry TRUE (default) data sf object, drop geometry turning data frame table. hide_na_cols TRUE (default), hide columns values NA. currency_value TRUE, use gt::fmt_currency() format value columns instead gt::fmt_number(). survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. table One table IDs include label source note. prefix Text insert ACS survey label. end character string appended end full label. Defaults \".\". est_cols, perc_cols Deprecated. Estimate percent estimate columns.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt table with formatted ACS estimate and percent estimate columns — gt_acs","text":"","code":"if (FALSE) { if (interactive()) {   data <- get_acs_tables(     geography = \"county\",     county = \"Baltimore city\",     state = \"MD\",     table = \"B08134\"   )    tbl_data <- filter_acs(data, indent == 1, line_number <= 10)   tbl_data <- select_acs(tbl_data)    gt_acs(     tbl_data,     column_title_label = \"Commute time\",     table = \"B08134\"   ) } }"},{"path":"https://elipousson.github.io/getACS/reference/gt_acs_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table with values compared by name, geography, or variable — gt_acs_compare","title":"Create a gt table with values compared by name, geography, or variable — gt_acs_compare","text":"gt_acs_compare() variant gt_acs() uses pivot_acs_wider() support comparisons multiple named areas multiple geographies side--side combined gt table.","code":""},{"path":"https://elipousson.github.io/getACS/reference/gt_acs_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table with values compared by name, geography, or variable — gt_acs_compare","text":"","code":"gt_acs_compare(   data,   name_col = \"NAME\",   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   variable_col = \"variable\",   column_title_col = \"column_title\",   value_label = \"Est.\",   moe_label = \"MOE\",   perc_value_label = \"% share\",   perc_moe_label = \"% MOE\",   column_title_label = NULL,   id_cols = column_title_col,   id_expand = FALSE,   names_from = name_col,   values_from = NULL,   names_vary = \"slowest\",   names_glue = NULL,   names_sep = \"_\",   decimals = 0,   currency_value = FALSE,   merge_moe = TRUE,   split = \"last\",   limit = 1,   reverse = TRUE,   source_note = NULL,   append_note = FALSE,   hide_na_cols = TRUE,   survey = \"acs5\",   year = 2021,   table = NULL,   prefix = \"Source: \",   end = \".\",   use_md = FALSE,   use_spanner = TRUE,   ... )  gt_acs_compare_vars(   data,   name_col = \"NAME\",   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   variable_col = \"variable\",   column_title_col = \"column_title\",   value_label = NULL,   moe_label = \"MOE\",   id_cols = name_col,   names_from = variable_col,   values_from = c(value_col, moe_col),   use_spanner = FALSE,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/gt_acs_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table with values compared by name, geography, or variable — gt_acs_compare","text":"data data frame pivot. name_col Name column. Defaults \"NAME\". Ignored names_from set name_col. value_col Value column name. Defaults \"estimate\" moe_col Margin error column name. Defaults \"moe\" perc_prefix Prefix string percent value columns. perc_sep Separator string perc_prefix value_col moe_col strings. variable_col Variable column name. Defaults \"variable\". Typically, dropped table default. column_title_col, column_title_label Column title column name label. Defaults  \"column_title\" NULL. value_label Value column label. Defaults \"Est.\". moe_label Margin error column label. Defaults \"MOE\". perc_value_label Percent value column label. perc_moe_label Percent margin error column label. id_cols Defaults column_title_col. See tidyr::pivot_longer() details. id_expand values id_cols columns expanded expand() pivoting? results rows, output contain complete expansion possible values id_cols. Implicit factor levels represented data become explicit. Additionally, row values corresponding expanded id_cols sorted. names_from, values_from <tidy-select> pair arguments describing column (columns) get name output column (names_from), column (columns) get cell values (values_from). values_from contains multiple values, value added front output column. names_vary names_from identifies column (columns) multiple unique values, multiple values_from columns provided, order resulting column names combined? \"fastest\" varies names_from values fastest, resulting column naming scheme form: value1_name1, value1_name2, value2_name1, value2_name2. default. \"slowest\" varies names_from values slowest, resulting column naming scheme form: value1_name1, value2_name1, value1_name2, value2_name2. names_glue Instead names_sep names_prefix, can supply glue specification uses names_from columns (special .value) create custom column names. names_sep names_from values_from contains multiple variables, used join values together single string use column name. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. always need decimals = 0, fmt_integer() function considered. currency_value TRUE, use gt::fmt_currency() format value columns instead gt::fmt_number(). merge_moe TRUE, use gt::cols_merge_uncert() merge value_col moe_col percent value margin error columns. split Splitting side singl-kw:[last|first] // default: \"last\" delimiter splitting occur \"last\" instance delim character \"first\"? default uses \"last\" keyword, splitting begins last instance delimiter column name. option consequence limit value applied lesser number delimiter characters given column name (.e., number splits maximum possible number). limit Limit splitting scalar<numeric|integer|character> // default: NULL (optional) optional limit place splitting procedure. default NULL means column name split many times delimiter characters. words, default means limit. integer value given limit splitting cease iteration given limit. works tandem split since can adjust number splits either right side (split = \"last\") left side (split = \"first\") column name. reverse Reverse vector split names scalar<logical> // default: FALSE order split names reversed? default, FALSE. source_note Source note text scalar<character> // required Text used source note. can optionally use md() html() functions style text Markdown retain HTML elements text. append_note TRUE, add source_note end generated ACS data label. FALSE, supplied source_note used instead ACS label. hide_na_cols TRUE (default), hide columns NA values using gt::cols_hide(). survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. table One table IDs include label source note. prefix Text insert ACS survey label. end character string appended end full label. Defaults \".\". use_md TRUE, pass source_note gt::md() first. ... Additional arguments passed methods.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/gt_params.html","id":null,"dir":"Reference","previous_headings":"","what":"gt table function parameter definitions — gt_params","title":"gt table function parameter definitions — gt_params","text":"gt table function parameter definitions","code":""},{"path":"https://elipousson.github.io/getACS/reference/gt_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gt table function parameter definitions — gt_params","text":"gt_object gt object.","code":""},{"path":"https://elipousson.github.io/getACS/reference/jam_values.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS Jam Values for Medians — jam_values","title":"ACS Jam Values for Medians — jam_values","text":"Reference table ACS \"jam values\" medians \"Table 5.2. Jam Values Medians,\" Understanding Using American Community Survey Data: Data Users Need Know (2020). type units values added. year included account possibility alternate jam values earlier later years annual variation values checked.","code":""},{"path":"https://elipousson.github.io/getACS/reference/jam_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS Jam Values for Medians — jam_values","text":"","code":"jam_values"},{"path":"https://elipousson.github.io/getACS/reference/jam_values.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACS Jam Values for Medians — jam_values","text":"data frame 20 rows 6 variables: value Estimate value meaning Meaning estimate value use Subjects/tables jam value used type Type (minimum maximum jam value) units Units. Note year specific year, years duration. year Year applicable","code":""},{"path":"https://elipousson.github.io/getACS/reference/jam_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ACS Jam Values for Medians — jam_values","text":"https://docs.google.com/spreadsheets/d/1YX3NBDkkoDXHs88KDfPS_QoS9-1j_C_q8UAyjPznfzA/edit?usp=sharing","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_geography_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Join ACS data from a single reference geography by variable to calculate a ratio value based on the reference geography data — join_acs_geography_ratio","title":"Join ACS data from a single reference geography by variable to calculate a ratio value based on the reference geography data — join_acs_geography_ratio","text":"join_acs_geography_ratio() uses data get_acs_geographies() support calculation proportions join parent column titles data frame ACS data.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_geography_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join ACS data from a single reference geography by variable to calculate a ratio value based on the reference geography data — join_acs_geography_ratio","text":"","code":"join_acs_geography_ratio(   data,   variable_col = \"variable\",   value_col = \"estimate\",   moe_col = \"moe\",   geography = \"county\",   na_matches = \"never\",   digits = 2 )"},{"path":"https://elipousson.github.io/getACS/reference/join_acs_geography_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join ACS data from a single reference geography by variable to calculate a ratio value based on the reference geography data — join_acs_geography_ratio","text":"data data frame column names matching supplied parameters. variable_col Variable column name join join variable, Default: 'variable' value_col, moe_col Estimate margin error column names, Default: 'estimate' 'moe' geography Value geography column use comparison values, Default: 'county' na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). digits integer indicating number decimal places     (round) significant digits (signif) used.     round, negative values allowed (see ‘Details’).","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_geography_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join ACS data from a single reference geography by variable to calculate a ratio value based on the reference geography data — join_acs_geography_ratio","text":"data frame new estimate moe columns prefixed \"ratio_\".","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Join parent column titles to ACS data based on parent column ID values — join_acs_parent_column","title":"Join parent column titles to ACS data based on parent column ID values — join_acs_parent_column","text":"join_acs_parent_column() uses data labelled parent_column_id values join parent column titles data frame ACS data.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join parent column titles to ACS data based on parent column ID values — join_acs_parent_column","text":"","code":"join_acs_parent_column(   data,   column_id_col = \"column_id\",   column_title_col = \"column_title\",   parent_id_col = \"parent_column_id\",   suffix = c(\"\", \"_parent\"),   na_matches = \"never\",   relationship = \"many-to-one\" )"},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join parent column titles to ACS data based on parent column ID values — join_acs_parent_column","text":"data data frame specified column names. Expected labelled using label_acs_metadata(). column_id_col, column_title_col, parent_id_col Column ID, column title, parent column ID. suffix Suffix passed dplyr::left_join(), Default: c(\"\", \"_parent\") na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join parent column titles to ACS data based on parent column ID values — join_acs_parent_column","text":"data frame added parent column title.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Join percent estimates to ACS data based on denominator values — join_acs_percent","title":"Join percent estimates to ACS data based on denominator values — join_acs_percent","text":"join_acs_percent() uses denominator_column_id value column metadata added label_acs_metadata() calculate estimate percent share denominator value. tidycensus::moe_prop() used calculate margin error percentage.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join percent estimates to ACS data based on denominator values — join_acs_percent","text":"","code":"join_acs_percent(   data,   geoid_col = \"GEOID\",   column_id_col = \"column_id\",   denominator_col = \"denominator_column_id\",   na_matches = \"never\",   digits = 2 )"},{"path":"https://elipousson.github.io/getACS/reference/join_acs_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join percent estimates to ACS data based on denominator values — join_acs_percent","text":"data data frame column names including \"column_id\", \"column_title\", \"denominator_column_id\", \"estimate\", \"moe\". geoid_col GeoID column name use perc TRUE, Defaults 'GEOID'. column_id_col Column ID column name Census Reporter metadata. Defaults \"column_id\" denominator_col Denominator column ID name Census Reporter metadata. Defaults \"denominator_column_id\" na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). digits integer indicating number decimal places     (round) significant digits (signif) used.     round, negative values allowed (see ‘Details’).","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/label_acs_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Label American Community Survey data using table and column metadata from Census Reporter — label_acs_metadata","title":"Label American Community Survey data using table and column metadata from Census Reporter — label_acs_metadata","text":"Label American Community Survey data using table column metadata Census Reporter","code":""},{"path":"https://elipousson.github.io/getACS/reference/label_acs_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label American Community Survey data using table and column metadata from Census Reporter — label_acs_metadata","text":"","code":"label_acs_metadata(   data,   survey = \"acs5\",   year = 2021,   perc = TRUE,   geoid_col = \"GEOID\",   variable_col = \"variable\" )  label_acs_table_metadata(   data,   survey = \"acs5\",   year = 2021,   variable_col = \"variable\" )  label_acs_column_metadata(   data,   survey = \"acs5\",   year = 2021,   variable_col = \"variable\" )"},{"path":"https://elipousson.github.io/getACS/reference/label_acs_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label American Community Survey data using table and column metadata from Census Reporter — label_acs_metadata","text":"data data frame downloaded tidycensus::get_acs(). survey Survey, \"acs5\", \"acs3\", \"acs1\". year Sample year (2006 2021). perc TRUE (default), use denominator column ID calculate estimate percent share denominator value use tidycensus::moe_prop() calculate new margin error percent estimate. geoid_col GeoID column name use perc TRUE, Defaults 'GEOID'. variable_col Variable column name. Defaults \"variable\"","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/labs_acs_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","title":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","text":"labs_acs_survey() uses acs_survey_label_table() create label ggplot2 plot passed caption parameter ggplot2::labs().","code":""},{"path":"https://elipousson.github.io/getACS/reference/labs_acs_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","text":"","code":"labs_acs_survey(   ...,   caption = NULL,   survey = \"acs5\",   year = 2021,   prefix = \"Source: \",   table = NULL )"},{"path":"https://elipousson.github.io/getACS/reference/labs_acs_survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","text":"... Arguments passed ggplot2::labs title text title. subtitle text subtitle plot displayed title. tag text tag label displayed top-left plot default. alt,alt_insight Text used generation alt-text plot. See get_alt_text examples. caption text caption displayed bottom-right plot default. survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. prefix Text insert ACS survey label. table One table IDs include label source note.","code":""},{"path":"https://elipousson.github.io/getACS/reference/load_acs_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Load ACS variables with tidycensus::load_variables() — load_acs_vars","title":"Load ACS variables with tidycensus::load_variables() — load_acs_vars","text":"load_acs_vars() calls tidycensus::load_variables() combines returned data frame Census Reporter metadata label_acs_table_metadata(). function can optionally filter variable definitions set tables variables drop variables results.","code":""},{"path":"https://elipousson.github.io/getACS/reference/load_acs_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load ACS variables with tidycensus::load_variables() — load_acs_vars","text":"","code":"load_acs_vars(   year = 2021,   survey = \"acs5\",   cache = TRUE,   variable_col = \"variable\",   geography_levels = c(\"block\", \"block group\", \"tract\", \"county\", \"state\", \"us\"),   table = NULL,   vars = NULL,   drop_vars = NULL )"},{"path":"https://elipousson.github.io/getACS/reference/load_acs_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load ACS variables with tidycensus::load_variables() — load_acs_vars","text":"year Sample year (2006 2021). survey Survey, \"acs5\", \"acs3\", \"acs1\". cache Whether like cache dataset future access, load dataset existing cache. Defaults FALSE. variable_col Variable column name. Defaults \"variable\" geography_levels Ordered vector geography levels used convert geography column returned tidycensus::load_variables() factor. Default: c(\"block\", \"block group\", \"tract\", \"county\", \"state\", \"us\") table Table ID return. vars, drop_vars Variable IDs keep drop. table supplied (data contains data single table), numeric values allowed vars drop_vars (e.g. table \"B14001\" vars 2 data filtered variable \"B14001_002\").","code":""},{"path":"https://elipousson.github.io/getACS/reference/load_acs_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load ACS variables with tidycensus::load_variables() — load_acs_vars","text":"data frame ACS variables definitions.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Make and use crosswalk data based on U.S. Census block-level weights for U.S. Census tracts and non-Census geographic areas — make_area_xwalk","title":"Make and use crosswalk data based on U.S. Census block-level weights for U.S. Census tracts and non-Census geographic areas — make_area_xwalk","text":"make_area_xwalk() creates crosswalk data frame based weight_col parameter (year = 2020, use \"POP20\" population, \"HOUSING20\" households, \"ALAND20\" land area). Using function years, requires users add population data block_xwalk tigris::blocks() function includes population household count data 2020 year. function also tested areas include overlapping geometry results may invalid overlapping areas case.","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make and use crosswalk data based on U.S. Census block-level weights for U.S. Census tracts and non-Census geographic areas — make_area_xwalk","text":"","code":"make_area_xwalk(   area,   block_xwalk = NULL,   state = NULL,   county = NULL,   year = 2020,   name_col = \"NAME\",   weight_col = \"HOUSING20\",   geoid_col = \"GEOID\",   tract_col = \"TRACTCE20\",   by = c(TRACTCE20 = \"TRACTCE\"),   suffix = c(\"_block\", \"_tract\"),   placement = c(\"largest\", \"surface\", \"centroid\"),   digits = 2,   extensive = TRUE,   coverage = TRUE,   erase = FALSE,   area_threshold = 0.75,   keep_geometry = FALSE,   crs = NULL,   ... )  use_area_xwalk(   data,   area_xwalk,   geography = \"area\",   name_col = \"NAME\",   geoid_col = \"GEOID\",   suffix = c(\"_area\", \"\"),   weight_col = \"perc_HOUSING20\",   variable_col = \"variable\",   value_col = \"estimate\",   moe_col = \"moe\",   digits = 0,   perc = TRUE,   extensive = TRUE )"},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make and use crosswalk data based on U.S. Census block-level weights for U.S. Census tracts and non-Census geographic areas — make_area_xwalk","text":"area sf object arbitrary geography overlapping block_xwalk. Required. area partly overlaps block_xwalk, coverage set TRUE (default). block_xwalk Block-tract crosswalk sf object. NULL, state required create crosswalk using make_block_xwalk() state two-digit FIPS code (string) state want. Can also state name state abbreviation. county three-digit FIPS code (string) county like subset , vector FIPS codes desire multiple counties. Can also county name vector names. year data year; defaults 2021 name_col Name column area. weight_col Column name input block_xwalk use weighting. Generated weight_col used use_area_xwalk() weight_col make_area_xwalk() include \"perc_\" prefix. Defaults \"HOUSING20\" make_block_xwalk() \"perc_HOUSING20\" use_area_xwalk(). geoid_col, tract_col GeoID Census tract Census tract ID column block_xwalk Specification join variables format c(\"block column name tract\" = \"tract column name\"). Passed dplyr::left_join(). suffix Suffixes added output disambiguate column names block tract data. Unused 2020 data. placement String option joining area block_xwalk: \"largest\", \"surface\", \"centroid\". \"largest\" joins two using sf::st_join() largest set TRUE. \"surface\" first transforms block_xwalk using sf::st_point_on_surface() \"centroid\" uses sf::st_centroid(). digits Digits use percent share weight value. extensive TRUE (default) calculate new estimate values weighted sums re-calculate margin error tidycensus::moe_sum(). FALSE, calculate new estimate values weighted means (appropriate ACS median variables) drop margin error. perc also always set FALSE extensive FALSE. coverage TRUE (default), assumed area cover full extent block_xwalk additional feature added difference unioned area geometry unioned block_xwalk geometry. additional coverage ensures blocks accurately assigned alternate geography excluded returned data frame. coverage TRUE features area overlap block_xwalk, function issues warning resets coverage FALSE. reverse option applied features area overlap erase TRUE, apply tigris::erase_water() input area block_xwalk joining. Defaults FALSE. erase sf object, geometry input sf erased area block_xwalk. option intended support erasing open space non-developed land well water areas. area_threshold percentile rank cutoff water areas use erase operation, ranked size. Defaults 0.75, representing water areas 75th percentile (largest 25 percent areas).  value may need modified user achieve optimal results given location. keep_geometry TRUE, area_xwalk sf object geometry input area. Defaults FALSE. crs Coordinate reference system use input data. Recommended set projected CRS input area data geographic CRS. ... Passed make_block_xwalk(). data data frame downloaded tidycensus::get_acs(). area_xwalk area crosswalk data frame created make_area_xwalk(). Required use_area_xwalk(). geography character string used general description area geography type. Defaults \"area\" typical values include \"neighborhood\", \"planning district\", \"service area\". variable_col Variable column name. Defaults \"variable\" value_col, moe_col Value margin error column names (defaults \"estimate\" \"moe\"). perc TRUE (default), use denominator column ID calculate estimate percent share denominator value use tidycensus::moe_prop() calculate new margin error percent estimate.","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make and use crosswalk data based on U.S. Census block-level weights for U.S. Census tracts and non-Census geographic areas — make_area_xwalk","text":"tibble sf object.","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make and use crosswalk data based on U.S. Census block-level weights for U.S. Census tracts and non-Census geographic areas — make_area_xwalk","text":"Using area crosswalk creating area crosswalk make_area_xwalk(), can pass crosswalk use_area_xwalk() along data frame tidycensus::get_acs() get_acs_tables(). minimum, data must column name geoid_col along columns named \"variable\", \"estimate\", \"moe\". Please note approach aggregation work well data contains \"jam\" values, e.g. substitution 0 \"1939 older\" Median Year Built variable. Ideally, weight used aggregation based household counts aggregating household-level variable population counts aggregating individual-level variable.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/make_block_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Make crosswalk data for U.S. Census blocks and tracts — make_block_xwalk","title":"Make crosswalk data for U.S. Census blocks and tracts — make_block_xwalk","text":"make_block_xwalk() joined U.S. Census blocks data tigris::blocks() data frame tigris::tracts() provide crosswalk geographies. year = 2020, suffix parameter used. year year 2020, parameter must changed default value c(\"TRACTCE20\" = \"TRACTCE\"). 2020 also year tigris::blocks() includes population household count data required use crosswalk data frame make_area_xwalk().","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_block_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make crosswalk data for U.S. Census blocks and tracts — make_block_xwalk","text":"","code":"make_block_xwalk(   state,   county = NULL,   year = 2020,   by = c(TRACTCE20 = \"TRACTCE\"),   keep_zipped_shapefile = TRUE,   suffix = c(\"_block\", \"_tract\"),   crs = NULL,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/make_block_xwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make crosswalk data for U.S. Census blocks and tracts — make_block_xwalk","text":"state two-digit FIPS code (string) state want. Can also state name state abbreviation. county three-digit FIPS code (string) county like subset , vector FIPS codes desire multiple counties. Can also county name vector names. year data year; defaults 2021 Specification join variables format c(\"block column name tract\" = \"tract column name\"). Passed dplyr::left_join(). keep_zipped_shapefile Passed tigris::blocks() tigris::tracts() keep re-use zipped shapefile. suffix Suffixes added output disambiguate column names block tract data. Unused 2020 data. crs Coordinate reference system return. ... Arguments passed tigris::blocks","code":""},{"path":"https://elipousson.github.io/getACS/reference/pivot_acs_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a ACS data frame into a wider format by name or other columns — pivot_acs_wider","title":"Pivot a ACS data frame into a wider format by name or other columns — pivot_acs_wider","text":"pivot_acs_wider() wraps tidyr::pivot_wider() makes easy convert ACS data frame wide format changing value names_from parameter. default parameter value vary tidyr version names_vary = \"slowest\" values_from = NULL (replaced using .col_fn {tidyselect} function named value percent value columns). may need retain variable column set id_cols = \"variable\" column_title uniquely identify rows widening input data.","code":""},{"path":"https://elipousson.github.io/getACS/reference/pivot_acs_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a ACS data frame into a wider format by name or other columns — pivot_acs_wider","text":"","code":"pivot_acs_wider(   data,   name_col = \"NAME\",   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   perc_sep = \"_\",   .col_fn = any_of,   ...,   id_cols = NULL,   id_expand = FALSE,   names_from = name_col,   names_sep = \"_\",   names_glue = NULL,   names_vary = \"slowest\",   names_repair = \"check_unique\",   values_from = NULL )"},{"path":"https://elipousson.github.io/getACS/reference/pivot_acs_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a ACS data frame into a wider format by name or other columns — pivot_acs_wider","text":"data data frame pivot. name_col Name column. Defaults \"NAME\". Ignored names_from set name_col. value_col Value column name. Defaults \"estimate\" moe_col Margin error column name. Defaults \"moe\" perc_prefix Prefix string percent value columns. perc_sep Separator string perc_prefix value_col moe_col strings. .col_fn tidyselect function use column names. Defaults tidyselect::starts_with, ... Arguments passed tidyr::pivot_wider names_from,values_from <tidy-select> pair arguments describing column (columns) get name output column (names_from), column (columns) get cell values (values_from). values_from contains multiple values, value added front output column. names_prefix String added start every variable name. particularly useful names_from numeric vector want create syntactic variable names. names_sort column names sorted? FALSE, default, column names ordered first appearance. names_expand values names_from columns expanded expand() pivoting? results columns, output contain column names corresponding complete expansion possible values names_from. Implicit factor levels represented data become explicit. Additionally, column names sorted, identical names_sort produce. values_fill Optionally, (scalar) value specifies value filled missing. can named list want apply different fill values different value columns. values_fn Optionally, function applied value cell output. typically use combination id_cols names_from columns uniquely identify observation. can named list want apply different aggregations different values_from columns. unused_fn Optionally, function applied summarize values unused columns (.e. columns identified id_cols, names_from, values_from). default drops unused columns result. can named list want apply different aggregations different unused columns. id_cols must supplied unused_fn useful, since otherwise unspecified columns considered id_cols. similar grouping id_cols summarizing unused columns using unused_fn. id_cols <tidy-select> set columns uniquely identify observation. Typically used redundant variables, .e. variables whose values perfectly correlated existing variables. Defaults columns data except columns specified names_from values_from. tidyselect expression supplied, evaluated data removing columns specified names_from values_from. id_expand values id_cols columns expanded expand() pivoting? results rows, output contain complete expansion possible values id_cols. Implicit factor levels represented data become explicit. Additionally, row values corresponding expanded id_cols sorted. names_from, values_from <tidy-select> pair arguments describing column (columns) get name output column (names_from), column (columns) get cell values (values_from). values_from contains multiple values, value added front output column. names_sep names_from values_from contains multiple variables, used join values together single string use column name. names_glue Instead names_sep names_prefix, can supply glue specification uses names_from columns (special .value) create custom column names. names_vary names_from identifies column (columns) multiple unique values, multiple values_from columns provided, order resulting column names combined? \"fastest\" varies names_from values fastest, resulting column naming scheme form: value1_name1, value1_name2, value2_name1, value2_name2. default. \"slowest\" varies names_from values slowest, resulting column naming scheme form: value1_name1, value2_name1, value1_name2, value2_name2. names_repair happens output invalid column names? default, \"check_unique\" error columns duplicated. Use \"minimal\" allow duplicates output, \"unique\" de-duplicated adding numeric suffixes. See vctrs::vec_as_names() options.","code":""},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":null,"dir":"Reference","previous_headings":"","what":"Race or Latino Origin Table Codes — race_iteration","title":"Race or Latino Origin Table Codes — race_iteration","text":"selected tables, alphabetic suffix follows indicate table repeated nine major race Hispanic Latino groups.","code":""},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Race or Latino Origin Table Codes — race_iteration","text":"","code":"race_iteration"},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Race or Latino Origin Table Codes — race_iteration","text":"data frame 9 rows 3 variables: code Code group Race Ethnic group label Short label","code":""},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Race or Latino Origin Table Codes — race_iteration","text":"https://www.census.gov/programs-surveys/acs/data/data-tables/table-ids-explained.html","code":""},{"path":"https://elipousson.github.io/getACS/reference/scale_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales for plotting ACS data with ggplot2 — scale_acs","title":"Scales for plotting ACS data with ggplot2 — scale_acs","text":"Scales plotting ACS data ggplot2","code":""},{"path":"https://elipousson.github.io/getACS/reference/scale_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales for plotting ACS data with ggplot2 — scale_acs","text":"","code":"scale_x_acs_estimate(name = \"Estimate\", ..., labels = scales::label_comma())  scale_y_acs_percent(   name = \"Est. % of total\",   ...,   labels = scales::label_percent() )  scale_x_acs_percent(   name = \"Est. % of total\",   ...,   labels = scales::label_percent() )  scale_y_acs_estimate(name = \"Estimate\", ..., labels = scales::label_comma())  scale_x_acs_ts(name = \"Year\", ..., breaks = NULL, survey = \"acs5\", year = 2021)  scale_y_acs_ts(name = \"Year\", ..., breaks = NULL, survey = \"acs5\", year = 2021)"},{"path":"https://elipousson.github.io/getACS/reference/scale_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales for plotting ACS data with ggplot2 — scale_acs","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. ... arguments passed scale_(x|y)_continuous() labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/select_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop columns from an ACS data frame using dplyr::select() — select_acs","text":"","code":"select_acs(   .data,   ...,   .name_col = \"NAME\",   .column_title_col = \"column_title\",   .value_col = \"estimate\",   .moe_col = \"moe\",   .perc_prefix = \"perc\",   .perc_sep = \"_\",   .fn = any_of )"},{"path":"https://elipousson.github.io/getACS/reference/select_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop columns from an ACS data frame using dplyr::select() — select_acs","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. .name_col, .column_title_col, .value_col, .moe_col ACS data column names select using Tidyverse selection helper .fn. Set parameter NULL avoid selecting columns. .perc_prefix, .perc_sep Percent value prefix separator. Set .perc_prefix NULL drop percent value percent margin error columns. .fn Tidyverse selection helper use named ACS columns. Defaults tidyselect::any_of. See dplyr::select() overview selection features.","code":""},{"path":"https://elipousson.github.io/getACS/reference/select_acs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep or drop columns from an ACS data frame using dplyr::select() — select_acs","text":"select_acs() wrapper dplyr::select() designed select appropriate columns gt table created gt_acs(). Set named parameter NULL drop respective column use additional ... parameter modify selection. function replaces deprecated select_acs_cols() function.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/select_acs_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns from an ACS data frame using dplyr::select() — select_acs_cols","text":"","code":"select_acs_cols(   data,   ...,   name_col = \"NAME\",   column_title_col = \"column_title\",   value_cols = c(\"estimate\", \"moe\"),   perc_value_cols = c(\"perc_estimate\", \"perc_moe\"),   denominator_start = \"denominator\",   keep_denominator = FALSE )"},{"path":"https://elipousson.github.io/getACS/reference/select_acs_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns from an ACS data frame using dplyr::select() — select_acs_cols","text":"data Input data table obj:<data.frame>|obj:<tbl_df> // required data.frame object tibble (tbl_df). ... Additional parameters passed dplyr::select() name_col, column_title_col, value_cols, perc_value_cols ACS data column names select using tidyselect::any_of(). Set parameter NULL avoid selecting columns. denominator_start Passed starts_with() drop denominator columns. Defaults \"denominator\" keep_denominator FALSE (default), drop columns start text denominator_start","code":""},{"path":"https://elipousson.github.io/getACS/reference/select_acs_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select columns from an ACS data frame using dplyr::select() — select_acs_cols","text":"select_acs_cols() wrapper dplyr::select() designed select appropriate columns gt table created gt_acs(). Set named parameter NULL drop respective column use additional ... parameter modify selection.","code":""},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_source_note.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Census data source note to a gt table — tab_acs_source_note","title":"Add a Census data source note to a gt table — tab_acs_source_note","text":"tab_acs_source_note() adds source note gt table using acs_survey_label_table() gt::tab_source_note().","code":""},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_source_note.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Census data source note to a gt table — tab_acs_source_note","text":"","code":"tab_acs_source_note(   gt_object,   source_note = NULL,   append_note = FALSE,   survey = \"acs5\",   year = 2021,   table = NULL,   table_label = \"Table\",   prefix = \"Source: \",   end = \".\",   use_md = FALSE,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_source_note.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Census data source note to a gt table — tab_acs_source_note","text":"gt_object gt object. source_note Source note text scalar<character> // required Text used source note. can optionally use md() html() functions style text Markdown retain HTML elements text. append_note TRUE, add source_note end generated ACS data label. FALSE, supplied source_note used instead ACS label. survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. table One table IDs include label source note. table_label Label use referring table tables. \"s\" appended end table_label tables length 1. prefix Text insert ACS survey label. end character string appended end full label. Defaults \".\". use_md TRUE, pass source_note gt::md() first. ... tab_acs_source_note(), additional parameters passed acs_survey_label_table(). cols_merge_uncert_ext(), additional parameters passed gt::cols_merge_uncert(). fmt_acs_percent(), additional parameters passed gt::fmt_percent().","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_spanner_delim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new spanners using gt::tab_spanner_delim() — tab_acs_spanner_delim","title":"Create new spanners using gt::tab_spanner_delim() — tab_acs_spanner_delim","text":"Create new spanners using gt::tab_spanner_delim()","code":""},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_spanner_delim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new spanners using gt::tab_spanner_delim() — tab_acs_spanner_delim","text":"","code":"tab_acs_spanner_delim(   data,   column_title_col = \"column_title\",   value_col = \"estimate\",   moe_col = \"moe\",   perc_prefix = \"perc\",   columns = starts_with(c(value_col, moe_col, perc_prefix)),   delim = \"_\",   split = \"last\",   limit = 1,   reverse = TRUE,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_spanner_delim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new spanners using gt::tab_spanner_delim() — tab_acs_spanner_delim","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns consider splitting, relabeling, spanner setting operations. Can either series column names provided c(), vector column indices, select helper function. Examples select helper functions include starts_with(), ends_with(), contains(), matches(), one_of(), num_range(), everything(). argument works tandem spanners argument. delim Delimiter splitting scalar<character> // required delimiter use split input column name. single character (e.g., \"_\", \".\", etc.). split Splitting side singl-kw:[last|first] // default: \"last\" delimiter splitting occur \"last\" instance delim character \"first\"? default uses \"last\" keyword, splitting begins last instance delimiter column name. option consequence limit value applied lesser number delimiter characters given column name (.e., number splits maximum possible number). limit Limit splitting scalar<numeric|integer|character> // default: NULL (optional) optional limit place splitting procedure. default NULL means column name split many times delimiter characters. words, default means limit. integer value given limit splitting cease iteration given limit. works tandem split since can adjust number splits either right side (split = \"last\") left side (split = \"first\") column name. reverse Reverse vector split names scalar<logical> // default: FALSE order split names reversed? default, FALSE.","code":""},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":null,"dir":"Reference","previous_headings":"","what":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"Index created esri2sf::esriIndex() listing services located https://tigerweb.geo.census.gov/arcgis/rest/services. Access ArcGIS services using esri2sf package https://github.com/elipousson/esri2sf arcpullr https://github.com/pfrater/arcpullr/.","code":""},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"","code":"tigerweb_geo_index"},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"data frame 7081 rows 15 variables: name Name type Service/layer type url Folder/service/layer URL urlType URL type folderPath Index type serviceName Service name serviceType Service type id integer Layer ID number parentLayerId integer Parent layer ID number defaultVisibility logical Layer default visibility subLayerIds list Sublayer ID numbers minScale double Minimum scale maxScale integer Maximum scale geometryType Geometry type supportsDynamicLegends logical Supports dynamic legends","code":""},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"https://tigerweb.geo.census.gov/arcgis/rest/services","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized variant of tidycensus::get_acs — vec_get_acs","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"Vectorized variant tidycensus::get_acs","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"","code":"vec_get_acs(..., .fn = tidycensus::get_acs, .size = NULL, .call = caller_env())"},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"... Additional parameters passed .fn. .fn Function call parameters, Defaults tidycensus::get_acs. Function must require geography parameter return data frame. .size Desired output size. .call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"list data frames (using default .fn value another function returns data frame). list data frames.","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"","code":"if (FALSE) { if (interactive()) {   # TODO: Add examples } }"},{"path":"https://elipousson.github.io/getACS/news/index.html","id":"getacs-development-version","dir":"Changelog","previous_headings":"","what":"getACS (development version)","title":"getACS (development version)","text":"Add collapse_acs_variables() helper function. Add gt_acs_compare() function. Add load_acs_vars() function wrapper tidycensus::load_variables(). Add jam_values reference data. Add extensive parameter use_area_xwalk() support calculation weighted mean estimates. Fix errors due invalid geometry make_block_xwalk() make_area_xwalk() functions. Add experimental functions geom_acs_errorbarh() geom_acs_errorbarv()","code":""},{"path":"https://elipousson.github.io/getACS/news/index.html","id":"getacs-011","dir":"Changelog","previous_headings":"","what":"getACS 0.1.1","title":"getACS 0.1.1","text":"Add working versions make_block_xwalk(), make_area_xwalk(), use_area_xwalk() functions. Add tigerweb_geo_index race_iteration reference data. Add vignettes.","code":""},{"path":"https://elipousson.github.io/getACS/news/index.html","id":"getacs-010","dir":"Changelog","previous_headings":"","what":"getACS 0.1.0","title":"getACS 0.1.0","text":"Initial release. Package name subject change.","code":""}]
