[{"path":"https://elipousson.github.io/getACS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Eli Pousson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elipousson.github.io/getACS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/getACS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2023). getACS: Help Wrangling American Community Survey Data tidycensus. R package version 0.1.0.9001, https://elipousson.github.io/getACS/.","code":"@Manual{,   title = {getACS: Help Wrangling American Community Survey Data from tidycensus},   author = {Eli Pousson},   year = {2023},   note = {R package version 0.1.0.9001},   url = {https://elipousson.github.io/getACS/}, }"},{"path":"https://elipousson.github.io/getACS/index.html","id":"getacs","dir":"","previous_headings":"","what":"Help Wrangling American Community Survey Data from tidycensus","title":"Help Wrangling American Community Survey Data from tidycensus","text":"goal getACS make easier work American Community Survey data tidycensus package. package includes: Helpers creating tables ACS data using gt package Helpers extend existing tidycensus::get_acs() function work multiple years geographies Note don’t love current name package expect rename soon think better one.","code":""},{"path":"https://elipousson.github.io/getACS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Help Wrangling American Community Survey Data from tidycensus","text":"can install development version getACS GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"elipousson/getACS\")"},{"path":"https://elipousson.github.io/getACS/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Help Wrangling American Community Survey Data from tidycensus","text":"easycensus cwi","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_survey_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Assorted helpers for ACS survey types and labels — acs_survey_match","title":"Assorted helpers for ACS survey types and labels — acs_survey_match","text":"Assorted helpers ACS survey types labels","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_survey_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assorted helpers for ACS survey types and labels — acs_survey_match","text":"","code":"acs_survey_match(survey = \"acs5\", error_call = caller_env())  acs_survey_sample(survey = \"acs5\")  acs_survey_ts(survey = \"acs5\", year = 2021, call = caller_env())  acs_survey_label(   survey = \"acs5\",   year = 2021,   pattern = \"{year_start}-{year} ACS {sample}-year Estimates\",   prefix = \"\" )  acs_survey_label_table(   survey = \"acs5\",   year = 2021,   prefix = \"\",   table = NULL,   table_label = \"Table\",   sep = \", \",   and = \" and \",   before = \"\",   after = \".\",   oxford_comma = TRUE )"},{"path":"https://elipousson.github.io/getACS/reference/acs_survey_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assorted helpers for ACS survey types and labels — acs_survey_match","text":"survey ACS survey, \"acs5\", \"acs3\", \"acs1\". error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. pattern Pattern passed glue::glue(). Allows use year_start variable earliest year survey sample specified survey parameter. prefix Text insert ACS survey label. table One table IDs include label source note. table_label Label use referring table tables. \"s\" appended end table_label tables length 1. sep Separator inserted words. Character string prepended last word. , character string added /word. oxford_comma Whether insert separator last two elements list.","code":""},{"path":"https://elipousson.github.io/getACS/reference/acs_survey_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assorted helpers for ACS survey types and labels — acs_survey_match","text":"","code":"acs_survey_match(\"acs1\") #> [1] \"acs1\"  acs_survey_sample(\"acs3\") #> [1] \"3\"  acs_survey_ts(\"acs5\", 2020) #> ℹ Learn more about comparing 2020 American Community Survey Data: #>   <https://www.census.gov/programs-surveys/acs/guidance/comparing-acs-data/2020.html> #> [1] 2020 2015 2010  acs_survey_label() #> 2017-2021 ACS 5-year Estimates  acs_survey_label_table(table = c(\"B19013\", \"B01003\")) #> 2017-2021 ACS 5-year Estimates, Tables B19013. and B01003."},{"path":"https://elipousson.github.io/getACS/reference/cols_merge_uncert_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","text":"cols_merge_uncert_ext() variant gt::cols_merge_uncert() support col_val col_uncert set based length 2 cols parameter optionally apply prefix postfix value. options primarily internal use gt_acs(), fmt_acs_estimate(), fmt_acs_percent().","code":""},{"path":"https://elipousson.github.io/getACS/reference/cols_merge_uncert_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","text":"","code":"cols_merge_uncert_ext(   gt_object,   columns = NULL,   col_val = NULL,   col_uncert = NULL,   prefix = \"\",   postfix = \"\",   sep = \"\",   ...,   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/cols_merge_uncert_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert_ext","text":"gt_object gt object. columns description col_val Column target base values <column-targeting expression> // required column contains values start range. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided . col_uncert Column columns target uncertainty values <column-targeting expression> // required common case involves supplying single column uncertainties; values combined col_val. Less commonly, lower upper uncertainty bounds may different. case, two columns representing lower upper uncertainty values away col_val, respectively, provided. select helper functions starts_with() ends_with() can used column targeting, recommended one two column names explicitly provided vector. prefix, postfix Optional strings insert /col_val col_uncert. Use length 2 string c(\"\", \"uncert_prefix\") want apply prefix one column specification. sep Separator text uncertainties scalar<character> // default: \" +/- \" separator text contains uncertainty mark single uncertainty value. default value \" +/- \" indicates appropriate plus/minus mark used depending output context. want special symbol taken literally, can supplied within () function. ... One character vectors. NULLs removed; scalar inputs (vectors length 1) recycled common length vector inputs. Like R functions, missing values \"infectious\": whenever missing value combined another string result always missing. Use dplyr::coalesce() str_replace_na() convert desired value. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/fct_recode_with_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for recoding based on a named list — fct_recode_with_list","title":"Helper for recoding based on a named list — fct_recode_with_list","text":"Helper recoding based named list","code":""},{"path":"https://elipousson.github.io/getACS/reference/fct_recode_with_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for recoding based on a named list — fct_recode_with_list","text":"","code":"fct_recode_with_list(x, list = NULL, in_order = TRUE, ordered = NA)"},{"path":"https://elipousson.github.io/getACS/reference/filter_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter American Community Survey data by table, variables, or other attributes — filter_acs","title":"Filter American Community Survey data by table, variables, or other attributes — filter_acs","text":"data frame American Community Survey data enriched table column metadata using label_acs_metadata() function.","code":""},{"path":"https://elipousson.github.io/getACS/reference/filter_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter American Community Survey data by table, variables, or other attributes — filter_acs","text":"","code":"filter_acs(   data,   ...,   table = NULL,   column = NULL,   vars = NULL,   drop_vars = NULL )"},{"path":"https://elipousson.github.io/getACS/reference/filter_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter American Community Survey data by table, variables, or other attributes — filter_acs","text":"data data frame \"table_id\", \"variable\", \"column_title\" columns. ... Parameters passed dplyr::filter() table, column Table ID column title values return. vars, drop_vars Variables keep drop.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Format estimate and margin of error columns (or % estimate and % margin of\nerror columns) in a gt table — fmt_acs_estimate","title":"Format estimate and margin of error columns (or % estimate and % margin of\nerror columns) in a gt table — fmt_acs_estimate","text":"fmt_acs_estimate() formats estimate margin error columns gt table. Used gt_acs()","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format estimate and margin of error columns (or % estimate and % margin of\nerror columns) in a gt table — fmt_acs_estimate","text":"","code":"fmt_acs_estimate(   gt_object,   col_est = \"estimate\",   col_moe = \"moe\",   columns = NULL,   col_labels = \"Est.\",   spanner = NULL,   decimals = 0,   use_seps = TRUE,   ...,   call = caller_env() )  fmt_acs_percent(   gt_object,   col_est = \"perc_estimate\",   col_moe = \"perc_moe\",   columns = NULL,   col_labels = \"% share\",   spanner = NULL,   decimals = 0,   use_seps = TRUE,   ...,   call = caller_env() )  cols_label_ext(   gt_object,   columns = NULL,   col_labels = NULL,   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format estimate and margin of error columns (or % estimate and % margin of\nerror columns) in a gt table — fmt_acs_estimate","text":"gt_object gt object. col_est, col_moe Column names estimate margin error values table data. columns NULL (default), columns set c(col_est, col_moe). spanner NULL, columns passed cols_merge_uncert_ext() must length 2 character vector. col_labels Column name used one columns passed cols_label_ext() spanner NULL, gt table passed cols_merge_uncert_ext(). NULL, spanner passed label parameter gt::tab_spanner(). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. always need decimals = 0, fmt_integer() function considered. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. ... Additional parameters passed gt::fmt_number() fmt_acs_estimate() gt::fmt_percent() fmt_acs_percent(). call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format estimate and margin of error columns (or % estimate and % margin of\nerror columns) in a gt table — fmt_acs_estimate","text":"Using cols_label_ext cols_label_ext() variant gt::cols_label() used fmt_acs_estimate() fmt_acs_percent().","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_jam_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace placeholder jam values in an ACS data frame — fmt_acs_jam_values","title":"Replace placeholder jam values in an ACS data frame — fmt_acs_jam_values","text":"Currently supports variable B25035_001 Median Year Structure Built table.","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_jam_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace placeholder jam values in an ACS data frame — fmt_acs_jam_values","text":"","code":"fmt_acs_jam_values(data)"},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_jam_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace placeholder jam values in an ACS data frame — fmt_acs_jam_values","text":"data Data frame ACS data","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_minutes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format ACS columns using different units — fmt_acs_minutes","title":"Format ACS columns using different units — fmt_acs_minutes","text":"Format ACS columns using different units","code":""},{"path":"https://elipousson.github.io/getACS/reference/fmt_acs_minutes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format ACS columns using different units — fmt_acs_minutes","text":"","code":"fmt_acs_minutes(data, column_title = \"column_title\")"},{"path":"https://elipousson.github.io/getACS/reference/getACS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"getACS: Help Wrangling American Community Survey Data from tidycensus — getACS-package","title":"getACS: Help Wrangling American Community Survey Data from tidycensus — getACS-package","text":"package helper functions working Census data downloaded tidycensus package.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/getACS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"getACS: Help Wrangling American Community Survey Data from tidycensus — getACS-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get table or column metadata from Census Reporter project — get_acs_metadata","title":"Get table or column metadata from Census Reporter project — get_acs_metadata","text":"Read precomputed U.S. Census table column metadata files  Census Reporter GitHub repository.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get table or column metadata from Census Reporter project — get_acs_metadata","text":"","code":"get_acs_metadata(   survey = \"acs5\",   year = 2021,   metadata = \"table\",   ...,   table = NULL,   cache_data = TRUE,   progress = FALSE,   show_col_types = FALSE,   error_call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get table or column metadata from Census Reporter project — get_acs_metadata","text":"survey Survey, \"acs5\", \"acs3\", \"acs1\". year Sample year (2006 2021). metadata Type metadata return, \"table\" \"column\" ... Arguments passed readr::read_csv file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. quote Single character used quote strings. col_names Either TRUE, FALSE character vector column names. TRUE, first row input used column names, included data frame. FALSE, column names generated automatically: X1, X2, X3 etc. col_names character vector, values used names columns, first row input read first row output data frame. Missing (NA) column names generate warning, filled dummy names ...1, ...2 etc. Duplicate column names generate warning made unique, see name_repair control done. col_types One NULL, cols() specification, string. See vignette(\"readr\") details. NULL, column types inferred guess_max rows input, interspersed throughout file. convenient (fast), robust. guessed types wrong, need increase guess_max supply correct types . Column specifications created list() cols() must contain one column specification column. want read subset columns, use cols_only(). Alternatively, can use compact string representation character represents one column: c = character = integer n = number d = double l = logical f = factor D = date T = date time t = time ? = guess _ - = skip default, reading file without column specification print message showing readr guessed . remove message, set show_col_types = FALSE set `options(readr.show_col_types = FALSE). col_select Columns include results. can use mini-language dplyr::select() refer columns name. Use c() use one selection expression. Although usage less common, col_select also accepts numeric column index. See ?tidyselect::language full details selection language. id name column store file path. useful reading multiple input files data file paths, data collection date. NULL (default) extra column created. locale locale controls defaults vary place place. default locale US-centric (like R), can use locale() create locale controls things like default time zone, encoding, decimal mark, big mark, day/month names. na Character vector strings interpret missing values. Set option character() indicate missing values. quoted_na missing values inside quotes treated missing values (default) strings. parameter soft deprecated readr 2.0.0. comment string used identify comments. text comment characters silently ignored. trim_ws leading trailing whitespace (ASCII spaces tabs) trimmed field parsing ? skip Number lines skip reading data. comment supplied commented lines ignored skipping. n_max Maximum number lines read. guess_max Maximum number lines use guessing column types. never use number lines read. See vignette(\"column-types\", package = \"readr\") details. name_repair Handling column names. default behaviour ensure column names \"unique\". Various repair strategies supported: \"minimal\": name repair checks, beyond basic existence names. \"unique\" (default value): Make sure names unique empty. \"check_unique\": name repair, check unique. \"universal\": Make names unique syntactic. function: apply custom name repair (e.g., name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function(). argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . num_threads number processing threads use initial parsing lazy reading data. data contains newlines within fields parser automatically detect fall back using one thread . However know file newlines within quoted fields safest set num_threads = 1 explicitly. progress Display progress bar? default display interactive session knitting document. automatic progress bar can disabled setting option readr.show_progress FALSE. show_col_types FALSE, show guessed column types. TRUE always show column types, even supplied. NULL (default) show column types explicitly supplied col_types argument. skip_empty_rows blank rows ignored altogether? .e. option TRUE blank rows represented .  FALSE represented NA values columns. lazy Read values lazily? default, FALSE, special considerations reading file lazily tripped users. Specifically, things get tricky reading writing back file. , general, lazy reading (lazy = TRUE) many benefits, especially interactive use downstream work involves subset rows columns. Learn should_read_lazy() documentation altrep argument vroom::vroom().","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get multiple ACS tables or multiple tables for multiple geographies — get_acs_tables","title":"Get multiple ACS tables or multiple tables for multiple geographies — get_acs_tables","text":"functions wrap tidycensus::get_acs() label_acs_metadata() support downloading multiple tables combining tables single data frame downloading data multiple geographies. Note Census API specific rate request limit using Census API key, using functions large number tables geographies may result errors failed requests. CRAN policies require tidycensus avoid caching default, however, package sets cache_table = TRUE default avoid unecessary load Census API.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get multiple ACS tables or multiple tables for multiple geographies — get_acs_tables","text":"","code":"get_acs_tables(   geography,   table,   cache_table = TRUE,   year = 2021,   survey = \"acs5\",   label = TRUE,   perc = TRUE,   geoid_col = \"GEOID\",   ... )  get_acs_geographies(   geographies = c(\"county\", \"state\"),   state = NULL,   county = NULL,   msa = NULL,   table = NULL,   cache_table = TRUE,   year = 2021,   label = TRUE,   survey = \"acs5\",   perc = TRUE,   geoid_col = \"GEOID\",   ... )  get_acs_geography(   geography,   state = NULL,   county = NULL,   msa = NULL,   table = NULL,   cache_table = TRUE,   year = 2021,   label = TRUE,   survey = \"acs5\",   perc = TRUE,   geoid_col = \"GEOID\",   ...,   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get multiple ACS tables or multiple tables for multiple geographies — get_acs_tables","text":"geography geography data. table character vector tables. cache_table Whether cache table names faster future access. Defaults FALSE; TRUE, needs called per dataset.  variables dataset already cached via load_variables function, can bypassed. year year, endyear, ACS sample. 5-year ACS data available 2009 2021; 1-year ACS data available 2005 2021, exception 2020.  Defaults 2021. survey ACS contains one-year, three-year, five-year surveys expressed \"acs1\", \"acs3\", \"acs5\". default selection \"acs5.\" label TRUE (default), label returned ACS data label_acs_metadata() returning data frame. perc TRUE (default), use denominator column ID calculate estimate percent share denominator value use tidycensus::moe_prop() calculate new margin error percent estimate. geoid_col GeoID column name use perc TRUE, Defaults 'GEOID'. ... keyword arguments geographies character vector geographies. See https://walker-data.com/tidycensus/articles/basic-usage.html#geography--tidycensus supported options. Defaults c(\"county\", \"state\"). supplied geography support county state parameters, options dropped calling tidycensus::get_acs(). required parameters also bound returned data frame new columns. state optional vector states requesting data. State names, postal codes, FIPS codes accepted. Defaults NULL. county county requesting data. County names FIPS codes accepted. Must combined value supplied `state`. Defaults NULL. msa Name GeoID metro area filtered overall list metro areas returned geography geographies  \"metropolitan/micropolitan statistical area\", \"cbsa\", \"metropolitan statistical area/micropolitan statistical area\". call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get multiple ACS tables or multiple tables for multiple geographies — get_acs_tables","text":"","code":"if (FALSE) { if (interactive()) {   get_acs_tables(     geography = \"county\",     county = \"Baltimore city\",     state = \"MD\",     table = c(\"B01003\", \"B19013\")   )    get_acs_geographies(     geographies = c(\"county\", \"state\"),     state = \"MD\",     table = c(\"B01003\", \"B19013\")   ) } }"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a time series of ACS data — get_acs_ts","title":"Get a time series of ACS data — get_acs_ts","text":"Get time series ACS data","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_acs_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a time series of ACS data — get_acs_ts","text":"","code":"get_acs_ts(   geography,   state = NULL,   survey = \"acs5\",   year = 2021,   cache_table = TRUE,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/get_acs_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a time series of ACS data — get_acs_ts","text":"geography geography data. state optional vector states requesting data. State names, postal codes, FIPS codes accepted. Defaults NULL. survey ACS contains one-year, three-year, five-year surveys expressed \"acs1\", \"acs3\", \"acs5\". default selection \"acs5.\" year description cache_table Whether cache table names faster future access. Defaults FALSE; TRUE, needs called per dataset.  variables dataset already cached via load_variables function, can bypassed. ... Arguments passed tidycensus::get_acs variables Character string vector character strings variable IDs. tidycensus automatically returns estimate margin error associated variable. table ACS table like request variables. Uses lookup tables identify variables; performs faster variable table already exists load_variables(cache = TRUE). one table may requested per call. output One \"tidy\" (default) row represents enumeration unit-variable combination, \"wide\" row represents enumeration unit variables columns. county county requesting data. County names FIPS codes accepted. Must combined value supplied `state`. Defaults NULL. zcta zip code tabulation area(s) requesting data. Specify single value vector values get data one ZCTA. Numeric character ZCTA GEOIDs accepted. specifying ZCTAs, geography must set `\"zcta\"` `state` must specified `county` left `NULL`. Defaults NULL. geometry FALSE (default), return regular tibble ACS data. TRUE, uses tigris package return sf tibble simple feature geometry `geometry` column. keep_geo_vars TRUE, keeps variables Census shapefile obtained tigris.  Defaults FALSE. shift_geo (deprecated) TRUE, returns geometry Alaska Hawaii shifted thematic mapping entire US. Geometry originally obtained albersusa R package. May 2021, recommend using tigris::shift_geometry() instead. summary_var Character string \"summary variable\" ACS included output. Usually variable (e.g. total population) want use denominator comparison. key Census API key. Obtain one https://api.census.gov/data/key_signup.html moe_level confidence level returned margin error.  One 90 (default), 95, 99. show_call TRUE, display call made Census API. can useful debugging determining error messages returned due tidycensus Census API. Copy API call browser see returned API directly. Defaults FALSE.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_geography_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get geography parameters — get_geography_params","title":"Get geography parameters — get_geography_params","text":"Get named list parameters including geography , optionally, state county, dropped checked depending whether value required download data specified geography using Census API.","code":""},{"path":"https://elipousson.github.io/getACS/reference/get_geography_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get geography parameters — get_geography_params","text":"","code":"get_geography_params(   geography,   state = NULL,   county = NULL,   year = 2021,   allow_decennial = FALSE,   call = caller_env() )"},{"path":"https://elipousson.github.io/getACS/reference/get_geography_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get geography parameters — get_geography_params","text":"geography geography data. state, county State county. Defaults NULL. year Survey year. allow_decennial TRUE, allow geography values \"block\" \"voting district\" supported tidycensus::get_decennial(). FALSE (default), error geographies supported tidycensus::get_acs(). call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Format American Community Survey estimate and percent estimate columns for a\ngt table — gt_acs","title":"Format American Community Survey estimate and percent estimate columns for a\ngt table — gt_acs","text":"Create format gt table estimate margin error (optionally) percent estimate margin error value. Use combination select_acs_cols() helper function prep data creating table.","code":""},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format American Community Survey estimate and percent estimate columns for a\ngt table — gt_acs","text":"","code":"gt_acs(   data,   est_cols = c(\"estimate\", \"moe\"),   est_col_label = \"Est.\",   perc_cols = c(\"perc_estimate\", \"perc_moe\"),   perc_col_label = \"% share\",   est_spanner = NULL,   perc_spanner = NULL,   combined_spanner = NULL,   source_note = NULL,   survey = \"acs5\",   year = 2021,   prefix = \"Source: \",   before = \"\",   after = \".\",   table = NULL,   decimals = 0,   column_title_col = \"column_title\",   column_title_label = NULL,   append_note = FALSE,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format American Community Survey estimate and percent estimate columns for a\ngt table — gt_acs","text":"data Input data table obj:<data.frame>|obj:<tbl_df> // required data.frame object tibble (tbl_df). est_cols, est_col_label, est_spanner Passed columns, col_labels, spanner parameter fmt_acs_estimate() perc_cols, perc_col_label, perc_spanner Passed columns, col_labels, spanner parameter fmt_acs_percent() combined_spanner NULL, combined_spanner passed label parameter gt::tab_spanner() using est_cols perc_cols columns parameter. source_note Source note text scalar<character> // required Text used source note. can optionally use md() html() functions style text Markdown retain HTML elements text. survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. prefix Text insert ACS survey label. , character string added /word. table One table IDs include label source note. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. always need decimals = 0, fmt_integer() function considered. column_title_col Column name check input gt table. required column_title_label supplied. column_title_label Optional label applied column named column_title_col. append_note TRUE, add source_note end generated ACS data label. FALSE, supplied source_note used instead ACS label. ... Additional parameters passed gt::fmt_number() fmt_acs_estimate() gt::fmt_percent() fmt_acs_percent().","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/gt_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format American Community Survey estimate and percent estimate columns for a\ngt table — gt_acs","text":"","code":"if (FALSE) { if (interactive()) {   data <- get_acs_tables(     geography = \"county\",     county = \"Baltimore city\",     state = \"MD\",     table = \"B08134\"   )    tbl_data <- filter_acs(data, indent == 1, line_number <= 10)   tbl_data <- select_acs_cols(tbl_data)    gt_acs(     tbl_data,     column_title_label = \"Commute time\",     table = \"B08134\"   ) } }"},{"path":"https://elipousson.github.io/getACS/reference/gt_params.html","id":null,"dir":"Reference","previous_headings":"","what":"gt table function parameter definitions — gt_params","title":"gt table function parameter definitions — gt_params","text":"gt table function parameter definitions","code":""},{"path":"https://elipousson.github.io/getACS/reference/gt_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gt table function parameter definitions — gt_params","text":"gt_object gt object.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Use parent column IDs to join parent column titles to ACS data — join_acs_parent_column","title":"Use parent column IDs to join parent column titles to ACS data — join_acs_parent_column","text":"Use parent column IDs join parent column titles ACS data","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use parent column IDs to join parent column titles to ACS data — join_acs_parent_column","text":"","code":"join_acs_parent_column(   data,   column_id_col = \"column_id\",   column_title_col = \"column_title\",   parent_id_col = \"parent_column_id\",   suffix = c(\"\", \"_parent\"),   na_matches = \"never\",   relationship = \"many-to-one\" )"},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use parent column IDs to join parent column titles to ACS data — join_acs_parent_column","text":"data data frame specified column names. Expected labelled using label_acs_metadata(). column_id_col, column_title_col, parent_id_col Column ID, column title, parent column ID. suffix Suffix passed dplyr::left_join(), Default: c(\"\", \"_parent\") na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_parent_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use parent column IDs to join parent column titles to ACS data — join_acs_parent_column","text":"modified data frame.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate estimates as a percent of the denominators for ACS data — join_acs_percent","title":"Calculate estimates as a percent of the denominators for ACS data — join_acs_percent","text":"Use denominator_column_id value column metadata added label_acs_metadata() calculate estimate percent share denominator value. tidycensus::moe_prop() used calculate margin error percentage. Typically, function used internal function.","code":""},{"path":"https://elipousson.github.io/getACS/reference/join_acs_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate estimates as a percent of the denominators for ACS data — join_acs_percent","text":"","code":"join_acs_percent(   data,   geoid_col = \"GEOID\",   denominator_col = \"denominator_column_id\",   na_matches = \"never\",   digits = 2 )"},{"path":"https://elipousson.github.io/getACS/reference/join_acs_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate estimates as a percent of the denominators for ACS data — join_acs_percent","text":"data data frame column names including \"column_id\", \"column_title\", \"denominator_column_id\", \"estimate\", \"moe\". geoid_col GeoID column name use perc TRUE, Defaults 'GEOID'. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). digits integer indicating number decimal places     (round) significant digits (signif) used.     round, negative values allowed (see ‘Details’).","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/label_acs_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Label American Community Survey data using table and column metadata from\nCensus Reporter — label_acs_metadata","title":"Label American Community Survey data using table and column metadata from\nCensus Reporter — label_acs_metadata","text":"Label American Community Survey data using table column metadata Census Reporter","code":""},{"path":"https://elipousson.github.io/getACS/reference/label_acs_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label American Community Survey data using table and column metadata from\nCensus Reporter — label_acs_metadata","text":"","code":"label_acs_metadata(   data,   survey = \"acs5\",   year = 2021,   perc = TRUE,   geoid_col = \"GEOID\" )  label_acs_table_metadata(data, survey = \"acs5\", year = 2021)  label_acs_column_metadata(data, survey = \"acs5\", year = 2021)"},{"path":"https://elipousson.github.io/getACS/reference/label_acs_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label American Community Survey data using table and column metadata from\nCensus Reporter — label_acs_metadata","text":"data data frame downloaded tidycensus::get_acs(). survey Survey, \"acs5\", \"acs3\", \"acs1\". year Sample year (2006 2021). perc TRUE (default), use denominator column ID calculate estimate percent share denominator value use tidycensus::moe_prop() calculate new margin error percent estimate. geoid_col GeoID column name use perc TRUE, Defaults 'GEOID'.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/labs_acs_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","title":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","text":"Label ggplot2 plot add caption based ACS survey year","code":""},{"path":"https://elipousson.github.io/getACS/reference/labs_acs_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","text":"","code":"labs_acs_survey(   ...,   caption = NULL,   survey = \"acs5\",   year = 2021,   prefix = \"Source: \",   table = NULL )"},{"path":"https://elipousson.github.io/getACS/reference/labs_acs_survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label a ggplot2 plot and add a caption based on an ACS survey year — labs_acs_survey","text":"survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. prefix Text insert ACS survey label. table One table IDs include label source note.","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a crosswalk data frame for U.S. Census tracts and arbitrary areas based\non block-level attributes — make_area_xwalk","title":"Make a crosswalk data frame for U.S. Census tracts and arbitrary areas based\non block-level attributes — make_area_xwalk","text":"make_area_xwalk() creates crosswalk data frame based weight_col parameter (year = 2020, use \"POP20\" population, \"HOUSING20\" households, \"ALAND20\" land area). Using function years, requires users add population data block_xwalk tigris::blocks() function includes population household count data 2020 year. function also tested areas include overlapping geometry results may invalid overlapping areas case.","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a crosswalk data frame for U.S. Census tracts and arbitrary areas based\non block-level attributes — make_area_xwalk","text":"","code":"make_area_xwalk(   area,   block_xwalk = NULL,   state = NULL,   county = NULL,   year = 2020,   name_col = \"name\",   weight_col = \"HOUSING20\",   geoid_col = \"GEOID\",   tract_col = \"TRACTCE20\",   by = c(TRACTCE20 = \"TRACTCE\"),   suffix = c(\"_block\", \"_tract\"),   digits = 2,   add_coverage = TRUE,   ... )  use_area_xwalk(   data,   area_xwalk,   name_col = \"name\",   geoid_col = \"GEOID\",   suffix = c(\"_area\", \"\"),   weight_col = \"HOUSING20\",   geography = \"area\",   digits = 0,   perc = TRUE,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a crosswalk data frame for U.S. Census tracts and arbitrary areas based\non block-level attributes — make_area_xwalk","text":"area sf object arbitrary geography overlapping block_xwalk. Required. area partly overlaps block_xwalk, add_coverage set TRUE (default). block_xwalk Block-tract crosswalk sf object. NULL, state required create crosswalk using make_block_xwalk() state two-digit FIPS code (string) state want. Can also state name state abbreviation. county three-digit FIPS code (string) county like subset , vector FIPS codes desire multiple counties. Can also county name vector names. year data year; defaults 2021 name_col Name column area. weight_col Column name use weighting geoid_col, tract_col GeoID Census tract Census tract ID column block_xwalk join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. digits Digits use percent share weight value. add_coverage TRUE (default), assumed area cover full extent block_xwalk additional feature added difference unioned area geometry unioned block_xwalk geometry. additional coverage ensures blocks accurately assigned alternate geography excluded returned data frame. ... arguments passed internal function load_tiger, exported. See Additional Arguments.","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_area_xwalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a crosswalk data frame for U.S. Census tracts and arbitrary areas based\non block-level attributes — make_area_xwalk","text":"Using area crosswalk creating area crosswalk make_area_xwalk(), can pass crosswalk use_area_xwalk() along data frame tidycensus::get_acs() get_acs_tables(). minimum, data must column name geoid_col along columns named \"variable\", \"estimate\", \"moe\". Please note approach aggregation work well data contains \"jam\" values, e.g. substitution 0 \"1939 older\" Median Year Built variable. Ideally, weight used aggregation based household counts aggregating household-level variable population counts aggregating individual-level variable.","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_block_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a crosswalk data frame for U.S. Census blocks and tracts — make_block_xwalk","title":"Make a crosswalk data frame for U.S. Census blocks and tracts — make_block_xwalk","text":"make_block_xwalk() joined U.S. Census blocks data tigris::blocks() data frame tigris::tracts() provide crosswalk geographies. year = 2020, suffix parameter used. year year 2020, parameter must changed default value c(\"TRACTCE20\" = \"TRACTCE\"). 2020 also year tigris::blocks() includes population household count data required use crosswalk data frame make_area_xwalk().","code":""},{"path":"https://elipousson.github.io/getACS/reference/make_block_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a crosswalk data frame for U.S. Census blocks and tracts — make_block_xwalk","text":"","code":"make_block_xwalk(   state,   county = NULL,   year = 2020,   by = c(TRACTCE20 = \"TRACTCE\"),   keep_zipped_shapefile = TRUE,   suffix = c(\"_block\", \"_tract\"),   ... )"},{"path":"https://elipousson.github.io/getACS/reference/make_block_xwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a crosswalk data frame for U.S. Census blocks and tracts — make_block_xwalk","text":"state two-digit FIPS code (string) state want. Can also state name state abbreviation. county three-digit FIPS code (string) county like subset , vector FIPS codes desire multiple counties. Can also county name vector names. year data year; defaults 2021 join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). keep_zipped_shapefile Passed tigris::blocks() tigris::tracts() keep re-use zipped shapefile. suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... Arguments passed tigris::blocks","code":""},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":null,"dir":"Reference","previous_headings":"","what":"Race or Latino Origin table codes — race_iteration","title":"Race or Latino Origin table codes — race_iteration","text":"selected tables, alphabetic suffix follows indicate table repeated nine major race Hispanic Latino groups.","code":""},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Race or Latino Origin table codes — race_iteration","text":"","code":"race_iteration"},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Race or Latino Origin table codes — race_iteration","text":"data frame 9 rows 3 variables: code Code group Race Ethnic group label Short label","code":""},{"path":"https://elipousson.github.io/getACS/reference/race_iteration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Race or Latino Origin table codes — race_iteration","text":"https://www.census.gov/programs-surveys/acs/data/data-tables/table-ids-explained.html","code":""},{"path":"https://elipousson.github.io/getACS/reference/select_acs_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to select columns typically used in an ACS table — select_acs_cols","title":"Helper function to select columns typically used in an ACS table — select_acs_cols","text":"Helper function select columns typically used ACS table","code":""},{"path":"https://elipousson.github.io/getACS/reference/select_acs_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to select columns typically used in an ACS table — select_acs_cols","text":"","code":"select_acs_cols(   data,   ...,   name_col = \"name\",   column_title_col = \"column_title\",   est_cols = c(\"estimate\", \"moe\"),   perc_est_cols = c(\"perc_estimate\", \"perc_moe\"),   denominator_start = \"denominator\",   keep_denominator = FALSE )"},{"path":"https://elipousson.github.io/getACS/reference/select_acs_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to select columns typically used in an ACS table — select_acs_cols","text":"data Input data table obj:<data.frame>|obj:<tbl_df> // required data.frame object tibble (tbl_df). ... Additional parameters passed dplyr::select() name_col, column_title_col, est_cols, perc_est_cols ACS data column names select using tidyselect::any_of(). Set parameter NULL avoid selecting columns. denominator_start Passed starts_with() drop denominator columns. Defaults \"denominator\" keep_denominator FALSE (default), drop columns start text denominator_start","code":""},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_source_note.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Census data source note to a gt table — tab_acs_source_note","title":"Add a Census data source note to a gt table — tab_acs_source_note","text":"tab_acs_source_note() adds source note gt table using acs_survey_label_table() gt::tab_source_note().","code":""},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_source_note.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Census data source note to a gt table — tab_acs_source_note","text":"","code":"tab_acs_source_note(   gt_object,   source_note = NULL,   survey = \"acs5\",   year = 2021,   prefix = \"Source: \",   before = \"\",   after = \".\",   table = NULL,   table_label = \"Table\",   append_note = FALSE,   use_md = FALSE,   ... )"},{"path":"https://elipousson.github.io/getACS/reference/tab_acs_source_note.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Census data source note to a gt table — tab_acs_source_note","text":"gt_object gt object. source_note Source note text scalar<character> // required Text used source note. can optionally use md() html() functions style text Markdown retain HTML elements text. survey ACS survey, \"acs5\", \"acs3\", \"acs1\". year Based year survey, acs_survey_ts() returns vector years non-overlapping ACS samples allow comparison. prefix Text insert ACS survey label. , character string added /word. table One table IDs include label source note. table_label Label use referring table tables. \"s\" appended end table_label tables length 1. append_note TRUE, add source_note end generated ACS data label. FALSE, supplied source_note used instead ACS label. use_md TRUE, pass source_note gt::md() first. ... tab_acs_source_note(), additional parameters passed acs_survey_label_table(). cols_merge_uncert_ext(), additional parameters passed gt::cols_merge_uncert(). fmt_acs_percent(), additional parameters passed gt::fmt_percent().","code":""},{"path":[]},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":null,"dir":"Reference","previous_headings":"","what":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"Index created esri2sf::esriIndex() listing services located https://tigerweb.geo.census.gov/arcgis/rest/services. Access ArcGIS services using esri2sf package https://github.com/elipousson/esri2sf arcpullr https://github.com/pfrater/arcpullr/.","code":""},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"","code":"tigerweb_geo_index"},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"data frame 7081 rows 15 variables: name Name type Service/layer type url Folder/service/layer URL urlType URL type folderPath Index type serviceName Service name serviceType Service type id integer Layer ID number parentLayerId integer Parent layer ID number defaultVisibility logical Layer default visibility subLayerIds list Sublayer ID numbers minScale double Minimum scale maxScale integer Maximum scale geometryType Geometry type supportsDynamicLegends logical Supports dynamic legends","code":""},{"path":"https://elipousson.github.io/getACS/reference/tigerweb_geo_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"U.S. Census Bureau ArcGIS Services Index — tigerweb_geo_index","text":"https://tigerweb.geo.census.gov/arcgis/rest/services","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized variant of tidycensus::get_acs — vec_get_acs","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"Vectorized variant tidycensus::get_acs","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"","code":"vec_get_acs(..., .fn = tidycensus::get_acs, .size = NULL, .call = caller_env())"},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"... Additional parameters passed .fn. .fn Function call parameters, Defaults tidycensus::get_acs. Function must require geography parameter return data frame. .size Desired output size. .call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"list data frames (using default .fn value another function returns data frame).","code":""},{"path":"https://elipousson.github.io/getACS/reference/vec_get_acs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized variant of tidycensus::get_acs — vec_get_acs","text":"","code":"if (FALSE) { if (interactive()) {   # TODO: Add examples } }"},{"path":"https://elipousson.github.io/getACS/news/index.html","id":"getacs-development-version","dir":"Changelog","previous_headings":"","what":"getACS (development version)","title":"getACS (development version)","text":"Add tests. Fix issue tab_acs_source_note() handling multiple tables.","code":""},{"path":"https://elipousson.github.io/getACS/news/index.html","id":"getacs-010","dir":"Changelog","previous_headings":"","what":"getACS 0.1.0","title":"getACS 0.1.0","text":"Initial release. Package name subject change.","code":""}]
