% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_acs.R
\name{filter_acs}
\alias{filter_acs}
\title{Filter ACS data by table ID, variables, or other attributes using
\code{dplyr::filter()}}
\usage{
filter_acs(
  data,
  ...,
  table = NULL,
  column = NULL,
  vars = NULL,
  drop_vars = NULL,
  geography = NULL,
  variable_col = "variable"
)
}
\arguments{
\item{data}{A data frame with a "table_id", "variable", and "column_title"
columns.}

\item{...}{Parameters passed to \code{\link[dplyr:filter]{dplyr::filter()}}}

\item{table, column}{Table ID and column title values to return.}

\item{vars, drop_vars}{Variable IDs to keep or to drop. If table is supplied
(or if data only contains data for a single table), numeric values are
allowed for vars and drop_vars (e.g. if table is "B14001" and vars is 2
data is filtered to variable "B14001_002").}

\item{geography}{Geography values to filter by.}

\item{variable_col}{Variable column name. Defaults to "variable".}
}
\description{
\code{\link[=filter_acs]{filter_acs()}} helps to filter a data frame of American Community Survey data
enriched with table and column metadata using the \code{\link[=label_acs_metadata]{label_acs_metadata()}}
function using \code{\link[dplyr:filter]{dplyr::filter()}}.
}
\examples{
\dontrun{
if (interactive()) {
  edu_data <- get_acs_geographies(
    c("county", "state"),
    table = "B15003",
    state = "MD",
    county = "Baltimore city"
  )

  edu_data |>
    filter_acs(vars = "B15003_017")

  edu_data |>
    filter_acs(vars = 17)

  edu_data |>
    filter_acs(drop_vars = 1)

  edu_data |>
    filter_acs(geography = "county")

  edu_data |>
    filter_acs(column = "Master's degree")
}
}
}
\seealso{
\code{\link[dplyr:filter]{dplyr::filter()}}
}
\keyword{internal}
